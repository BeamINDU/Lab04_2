class IntentClassifier:
    def __init__(self):
        self.sql_intents = [
            'data_query', 'count_query', 'search_query', 
            'analysis_query', 'report_query'
        ]
        
        self.general_intents = [
            'greeting', 'help', 'casual_conversation', 
            'system_status', 'about_company'
        ]
    
    def classify_intent(self, question: str) -> dict:
        question_lower = question.lower().strip()
        

        greeting_patterns = [
            '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', 'hey', 'good morning',
            'good afternoon', 'good evening', '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', 'thank you',
            '‡πÑ‡∏á', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ', '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞', '‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ', '‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á'
        ]
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô
        for pattern in greeting_patterns:
            if pattern in question_lower and len(question_lower) < 20:  # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç length
                return {
                    'intent': 'greeting',
                    'confidence': 0.95,
                    'should_use_sql': False,
                    'use_ai_response': True
                }
        
        # üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô hard-code
        help_patterns = [
            '‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ', 'what can you do',
            '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£', 'who are you', '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
            '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á', 'how to use'
        ]
        
        for pattern in help_patterns:
            if pattern in question_lower:
                return {
                    'intent': 'help',
                    'confidence': 0.9,
                    'should_use_sql': False,
                    'use_ai_response': True
                }
        
        # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
        sql_keywords = [
            '‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
            '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
            'how many', 'count', 'list', 'show', 'find', 'search',
            'employee', 'project', 'salary', 'budget', 'department', 'client',
            '‡∏°‡∏≤‡∏Å', '‡∏ô‡πâ‡∏≠‡∏¢', '‡∏™‡∏π‡∏á', '‡∏ï‡πà‡∏≥', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
            '‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà', '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà'
        ]
        
        # üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AND ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        has_data_keyword = any(keyword in question_lower for keyword in sql_keywords)
        has_question_word = any(word in question_lower for word in ['‡πÉ‡∏Ñ‡∏£', '‡∏≠‡∏∞‡πÑ‡∏£', '‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà', '‡∏Å‡∏µ‡πà', '‡∏°‡∏µ', 'who', 'what', 'how', 'which'])
        
        if has_data_keyword and (has_question_word or len(question_lower) > 10):
            return {
                'intent': 'data_query',
                'confidence': 0.9,
                'should_use_sql': True,
                'use_ai_response': False
            }
        
        # üî• Default: ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ reject)
        return {
            'intent': 'general_conversation',
            'confidence': 0.7,
            'should_use_sql': False,
            'use_ai_response': True
        }