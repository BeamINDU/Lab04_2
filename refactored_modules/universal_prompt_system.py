# üéØ Universal Prompt System - Implementation
# ‡πÑ‡∏ü‡∏•‡πå: refactored_modules/universal_prompt_system.py

import re
import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from .tenant_config import TenantConfig

logger = logging.getLogger(__name__)

@dataclass
class CompanyContext:
    """‡∏ö‡∏£‡∏¥‡∏ö‡∏ó Company ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prompt Generation"""
    tenant_id: str
    name: str
    business_type: str
    language: str
    schema_info: Dict[str, Any]
    business_rules: Dict[str, Any]
    common_queries: List[str]
    sql_patterns: Dict[str, str]

class TypeSafetySQLValidator:
    """üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL ‡πÉ‡∏´‡πâ Type-Safe"""
    
    @staticmethod
    def has_type_safety_issues(sql: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Type Safety Issues ‡πÉ‡∏ô SQL"""
        
        # Patterns ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
        dangerous_patterns = [
            # COALESCE ‡∏Å‡∏±‡∏ö date/timestamp fields ‡∏î‡πâ‡∏ß‡∏¢ string
            r"COALESCE\s*\(\s*\w+\.(start_date|end_date|hire_date|created_at|updated_at)\s*,\s*'[^']+'\s*\)",
            r"COALESCE\s*\(\s*\w+\.date\w*\s*,\s*'[^']+'\s*\)",
            r"COALESCE\s*\(\s*(start_date|end_date|hire_date)\s*,\s*'[^']+'\s*\)",
            
            # COALESCE ‡∏Å‡∏±‡∏ö numeric fields ‡∏î‡πâ‡∏ß‡∏¢ string (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '0')
            r"COALESCE\s*\(\s*\w+\.(budget|salary|amount|price)\s*,\s*'(?!0)[^']+'\s*\)",
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, sql, re.IGNORECASE):
                logger.warning(f"üö® Type safety issue detected: {pattern}")
                return True
        
        return False
    
    @staticmethod
    def fix_type_safety_issues(sql: str) -> str:
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Type Safety Issues ‡πÉ‡∏ô SQL"""
        
        # ‡πÅ‡∏Å‡πâ COALESCE ‡∏Å‡∏±‡∏ö date fields
        def fix_date_coalesce(match):
            field = match.group(1) if match.group(1) else match.group(0).split(',')[0].split('(')[1].strip()
            return f"CASE WHEN {field} IS NULL THEN '‡πÑ‡∏°‡πà‡∏°‡∏µ' ELSE {field}::text END"
        
        # ‡πÅ‡∏Å‡πâ date field COALESCE
        fixed_sql = re.sub(
            r"COALESCE\s*\(\s*(\w+\.(start_date|end_date|hire_date|created_at|updated_at))\s*,\s*'[^']+'\s*\)",
            fix_date_coalesce,
            sql,
            flags=re.IGNORECASE
        )
        
        # ‡πÅ‡∏Å‡πâ standalone date field COALESCE
        fixed_sql = re.sub(
            r"COALESCE\s*\(\s*(start_date|end_date|hire_date)\s*,\s*'[^']+'\s*\)",
            fix_date_coalesce,
            fixed_sql,
            flags=re.IGNORECASE
        )
        
        # ‡πÅ‡∏Å‡πâ numeric fields ‡∏Å‡∏±‡∏ö string (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô '0')
        def fix_numeric_coalesce(match):
            field = match.group(1)
            return f"COALESCE({field}, 0)"
        
        fixed_sql = re.sub(
            r"COALESCE\s*\(\s*(\w+\.(budget|salary|amount|price))\s*,\s*'(?!0)[^']+'\s*\)",
            fix_numeric_coalesce,
            fixed_sql,
            flags=re.IGNORECASE
        )
        
        if fixed_sql != sql:
            logger.info("üîß Fixed type safety issues in SQL")
        
        return fixed_sql

class UniversalPromptGenerator:
    """üåü Universal Prompt Generator ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° Company"""
    
    def __init__(self):
        self.company_contexts: Dict[str, CompanyContext] = {}
        self.universal_templates = self._load_universal_templates()
        self.type_safety_rules = self._load_type_safety_rules()
        
    def register_company(self, company_context: CompanyContext):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Company ‡πÉ‡∏´‡∏°‡πà"""
        self.company_contexts[company_context.tenant_id] = company_context
        logger.info(f"‚úÖ Registered company: {company_context.name} ({company_context.business_type})")
    ""
    def generate_sql_prompt(self, question: str, tenant_id: str) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL Prompt ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏° Company"""
        
        if tenant_id not in self.company_contexts:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ context ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á minimal context
            return self._generate_fallback_prompt(question, tenant_id)
        
        context = self.company_contexts[tenant_id]
        
        # 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Template ‡∏ï‡∏≤‡∏° Business Type
        template = self._select_template(context.business_type, context.language)
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Components
        schema_section = self._build_schema_section(context)
        business_rules_section = self._build_business_rules_section(context)
        examples_section = self._build_examples_section(context, question)
        type_safety_section = self._build_type_safety_section()
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Final Prompt
        final_prompt = template.format(
            company_name=context.name,
            business_type=self._translate_business_type(context.business_type, context.language),
            schema_section=schema_section,
            business_rules_section=business_rules_section,
            examples_section=examples_section,
            type_safety_section=type_safety_section,
            user_question=question
        )
        
        logger.info(f"üìù Generated {context.business_type} prompt ({len(final_prompt)} chars) for: {question[:50]}...")
        return final_prompt
    
    def _load_universal_templates(self) -> Dict[str, str]:
        """Universal Templates - Simplified Version"""
        return {
            'thai_enterprise': """üéØ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {company_name}

    üè¢ ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {business_type}

    {schema_section}

    {type_safety_section}

    {business_rules_section}

    {examples_section}

    ‚ö° ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL (Simple & Effective):
    1. **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SQL ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏™‡∏°‡∏≠** - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    2. **‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô**
    3. **LEFT JOIN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå**
    4. **INNER JOIN ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
    5. **‡πÉ‡∏™‡πà ORDER BY ‡πÅ‡∏•‡∏∞ LIMIT ‡πÄ‡∏™‡∏°‡∏≠**

    üéØ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
    ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏° "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô" ‚Üí ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ COUNT ‡πÅ‡∏•‡∏∞ GROUP BY
    ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏á

    ‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏≥:
    ‚Ä¢ ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    ‚Ä¢ ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    ‚Ä¢ ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

    ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {user_question}

    ‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô:
    """,
                
            'thai_tourism': """üéØ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {company_name}

    üè® ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: {business_type}

    {schema_section}

    {type_safety_section}

    {business_rules_section}

    {examples_section}

    ‚ö° ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL (Tourism Focused):
    1. **‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô**
    2. **‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á**
    3. **‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô**
    4. **‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß**

    ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {user_question}

    ‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:
    """,
                
            'english_international': """üéØ You are a PostgreSQL Expert for {company_name}

    üåç International Business Context: {business_type}

    {schema_section}

    {type_safety_section}

    {business_rules_section}

    {examples_section}

    ‚ö° SQL Generation Rules (International Focus):
    1. **Start with simple, comprehensive queries**
    2. **Use LEFT JOIN to show all data including null relationships**
    3. **Only add WHERE conditions when explicitly asked**
    4. **Focus on international business metrics**

    Question: {user_question}

    Generate straightforward PostgreSQL query for global operations:
    """
        }

    def _select_template(self, business_type: str, language: str) -> str:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Template ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        
        if language == 'en':
            return self.universal_templates['english_international']
        
        # Thai language templates
        if business_type in ['tourism_hospitality', 'tourism']:
            return self.universal_templates['thai_tourism']
        else:
            return self.universal_templates['thai_enterprise']
    
    def _translate_business_type(self, business_type: str, language: str) -> str:
        """‡πÅ‡∏õ‡∏• Business Type ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤"""
        translations = {
            'th': {
                'enterprise_software': '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
                'tourism_hospitality': '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°',
                'international_operations': '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®',
                'general_business': '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
            },
            'en': {
                'enterprise_software': 'Enterprise Software Development',
                'tourism_hospitality': 'Tourism & Hospitality Services',
                'international_operations': 'Global Business Operations',
                'general_business': 'General Business Operations'
            }
        }
        
        return translations.get(language, translations['th']).get(
            business_type, business_type
        )
    
    def _build_schema_section(self, context: CompanyContext) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Schema Section ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"""
        
        if context.language == 'en':
            schema_text = "üìã DATABASE SCHEMA:\n"
        else:
            schema_text = "üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n"
        
        tables = context.schema_info.get('tables', {})
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        important_tables = ['employees', 'projects', 'employee_projects']
        other_tables = [t for t in tables.keys() if t not in important_tables]
        
        for table_name in important_tables + other_tables:
            if table_name in tables:
                table_info = tables[table_name]
                
                schema_text += f"üóÉÔ∏è {table_name}:\n"
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏à‡∏≥‡∏Å‡∏±‡∏î 8 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
                columns = table_info.get('columns', [])
                main_columns = []
                for col in columns[:8]:
                    if isinstance(col, str):
                        col_name = col.split(' ')[0] if ' ' in col else col
                        main_columns.append(col_name)
                
                schema_text += f"   ‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(main_columns)}\n"
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° business context ‡∏™‡∏±‡πâ‡∏ô‡πÜ
                if 'business_significance' in table_info:
                    significance = table_info['business_significance'][:100] + "..." if len(table_info['business_significance']) > 100 else table_info['business_significance']
                    schema_text += f"   üí° {significance}\n"
                
                schema_text += "\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        schema_text += "üîó ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:\n"
        if context.business_type == 'tourism_hospitality':
            schema_text += "‚Ä¢ clients ‚Üí projects (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‚Üí ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)\n"
            schema_text += "‚Ä¢ employees ‚Üí projects (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‚Üí ‡∏á‡∏≤‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß)\n"
        elif context.business_type == 'international_operations':
            schema_text += "‚Ä¢ clients ‚Üí international_contracts (global clients ‚Üí contracts)\n"
            schema_text += "‚Ä¢ contracts ‚Üí payments (‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‚Üí ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)\n"
        else:
            schema_text += "‚Ä¢ employees ‚Üí employee_projects ‚Üí projects\n"
            schema_text += "‚Ä¢ projects ‚Üí clients (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ‚Üí ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£)\n"
        
        return schema_text
    
    def _build_business_rules_section(self, context: CompanyContext) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Business Rules Section - Fixed Version"""
        
        if context.language == 'en':
            rules_text = "üè¢ BUSINESS RULES:\n"
        else:
            rules_text = "üè¢ ‡∏Å‡∏é‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞:\n"
        
        business_rules = context.business_rules
        if not business_rules:
            return rules_text + "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n"
        
        # üîß FIX: ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ business rules ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        simple_rules_only = ['employee_levels', 'project_sizes']  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏é‡∏á‡πà‡∏≤‡∏¢‡πÜ
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category_translations = {
            'employee_levels': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' if context.language == 'th' else 'Employee Levels',
            'project_sizes': '‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' if context.language == 'th' else 'Project Sizes'
        }
        
        # üîß FIX: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏é‡πÅ‡∏Ñ‡πà 2 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏•‡∏∞ 2 ‡∏Å‡∏é‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
        shown_categories = 0
        for category, rules in business_rules.items():
            if category not in simple_rules_only or shown_categories >= 2:
                continue
                
            category_name = category_translations.get(category, category)
            rules_text += f"\n‚Ä¢ {category_name} (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á):\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏Å‡∏é‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
            rule_count = 0
            for key, condition in rules.items():
                if rule_count >= 2:
                    break
                rules_text += f"  - {key}: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô\n"  # üîß FIX: ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                rule_count += 1
                
            shown_categories += 1
        
        # üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        rules_text += f"\n‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
        
        return rules_text
    
    def _build_type_safety_section(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Type Safety Section"""
        return self.type_safety_rules
    
    def _build_examples_section(self, context: CompanyContext, question: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Examples Section ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        
        if context.language == 'en':
            examples_text = "üìö RELEVANT SQL EXAMPLES:\n"
        else:
            examples_text = "üìö ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á SQL ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n"
        
        # ‡∏´‡∏≤ patterns ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        relevant_patterns = self._find_relevant_patterns(question, context)
        
        if not relevant_patterns:
            return examples_text + "üí° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏à‡∏≥‡∏Å‡∏±‡∏î 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        for i, (pattern_name, sql_example) in enumerate(relevant_patterns.items()):
            if i >= 2:
                break
                
            examples_text += f"\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà {i+1} ({pattern_name}):\n"
            examples_text += "```sql\n"
            examples_text += sql_example.strip()
            examples_text += "\n```\n"
        
        return examples_text
    
    def _find_relevant_patterns(self, question: str, context: CompanyContext) -> Dict[str, str]:
        """‡∏´‡∏≤ SQL patterns - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Ç‡∏∂‡πâ‡∏ô"""
        
        question_lower = question.lower()
        relevant = {}
        
        # üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏° pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
        if '‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô' in question_lower and '‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö' in question_lower:
            # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
            relevant['employee_assignments'] = """
    SELECT 
        e.name as employee_name,
        e.position,
        e.department,
        COALESCE(p.name, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ') as project_name,
        COALESCE(p.client, '-') as client,
        COALESCE(ep.role, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó') as project_role
    FROM employees e
    LEFT JOIN employee_projects ep ON e.id = ep.employee_id
    LEFT JOIN projects p ON ep.project_id = p.id
    ORDER BY e.name, p.name
    LIMIT 20;
            """
        
        elif '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' in question_lower and ('‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á' in question_lower or '‡∏°‡∏µ' in question_lower):
            # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
            relevant['list_projects'] = """
    SELECT 
        p.name as project_name,
        p.client,
        p.status,
        p.budget,
        COUNT(ep.employee_id) as team_size
    FROM projects p
    LEFT JOIN employee_projects ep ON p.id = ep.project_id
    GROUP BY p.id, p.name, p.client, p.status, p.budget
    ORDER BY p.name
    LIMIT 20;
            """
        
        return relevant

    
    def _generate_fallback_prompt(self, question: str, tenant_id: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Fallback Prompt ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Context"""
        return f"""üéØ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {tenant_id.upper()}

{self.type_safety_rules}

üìã ‡∏Å‡∏é‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
‚Ä¢ ‡πÉ‡∏ä‡πâ ILIKE ‡πÅ‡∏ó‡∏ô LIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
‚Ä¢ ‡πÉ‡∏™‡πà LIMIT ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
‚Ä¢ ‡πÉ‡∏ä‡πâ proper JOIN types
‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NULL values ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:
"""

class UniversalPromptIntegration:
    """üîó Integration ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
    
    def __init__(self, original_agent):
        self.original_agent = original_agent
        self.universal_prompt = UniversalPromptGenerator()
        self.sql_validator = TypeSafetySQLValidator()
        self._register_existing_companies()
        
    def _register_existing_companies(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Companies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        
        try:
            # Company A - Enterprise
            company_a = self._create_company_context(
                tenant_id='company-a',
                name='SiamTech Bangkok HQ',
                business_type='enterprise_software'
            )
            self.universal_prompt.register_company(company_a)
            
            # Company B - Tourism  
            company_b = self._create_company_context(
                tenant_id='company-b',
                name='SiamTech Chiang Mai Regional',
                business_type='tourism_hospitality'
            )
            self.universal_prompt.register_company(company_b)
            
            # Company C - International
            company_c = self._create_company_context(
                tenant_id='company-c', 
                name='SiamTech International',
                business_type='international_operations'
            )
            self.universal_prompt.register_company(company_c)
            
            logger.info("‚úÖ All companies registered with Universal Prompt System")
            
        except Exception as e:
            logger.error(f"Failed to register companies: {e}")
    
    def _create_company_context(self, tenant_id: str, name: str, business_type: str) -> CompanyContext:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CompanyContext - Fixed Version"""
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏©‡∏≤
        language = 'en' if tenant_id == 'company-c' else 'th'
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ robust ‡∏Ç‡∏∂‡πâ‡∏ô)
        schema_info = {}
        business_rules = {}
        sql_patterns = {}
        
        try:
            if hasattr(self.original_agent, 'schema_service'):
                schema_info = self.original_agent.schema_service.get_schema_info(tenant_id)
                logger.info(f"‚úÖ Got schema info for {tenant_id}")
            else:
                logger.warning(f"‚ö†Ô∏è No schema_service for {tenant_id}")
        except Exception as e:
            logger.warning(f"Could not get schema info for {tenant_id}: {e}")
            # üîß FIX: ‡∏™‡∏£‡πâ‡∏≤‡∏á minimal schema
            schema_info = {
                'tables': {
                    'employees': {'columns': ['id', 'name', 'department', 'position', 'salary']},
                    'projects': {'columns': ['id', 'name', 'client', 'budget', 'status']},
                    'employee_projects': {'columns': ['employee_id', 'project_id', 'role', 'allocation']}
                }
            }
            
        try:
            if hasattr(self.original_agent, 'business_mapper'):
                business_rules = self.original_agent.business_mapper.get_business_logic(tenant_id)
                sql_patterns = self.original_agent.business_mapper.sql_patterns
                logger.info(f"‚úÖ Got business logic for {tenant_id}")
        except Exception as e:
            logger.warning(f"Could not get business rules for {tenant_id}: {e}")
            # üîß FIX: ‡∏™‡∏£‡πâ‡∏≤‡∏á simple business rules
            business_rules = {
                'employee_levels': {'all': '‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö'},
                'project_sizes': {'all': '‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î'}
            }
            sql_patterns = {}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á common queries
        common_queries = self._generate_common_queries(business_type, language)
        
        context = CompanyContext(
            tenant_id=tenant_id,
            name=name,
            business_type=business_type,
            language=language,
            schema_info=schema_info,
            business_rules=business_rules,
            common_queries=common_queries,
            sql_patterns=sql_patterns
        )
        
        logger.info(f"‚úÖ Created context for {tenant_id}: {business_type} ({language})")
        return context
    
    def _generate_common_queries(self, business_type: str, language: str) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏≤‡∏° business type"""
        
        if language == 'en':
            base = ["How many employees", "Which department has most people", "Who is the manager"]
            specific = {
                'international_operations': [
                    "Which projects have highest USD budget",
                    "How many international clients", 
                    "Revenue breakdown by country"
                ]
            }
        else:
            base = ["‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô", "‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î", "‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤"]
            specific = {
                'enterprise_software': [
                    "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                    "‡πÉ‡∏Ñ‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", 
                    "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å"
                ],
                'tourism_hospitality': [
                    "‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á",
                    "‡πÅ‡∏Ç‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î",
                    "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß"
                ]
            }
        
        return base + specific.get(business_type, [])
    
    async def generate_enhanced_sql_with_universal_prompt(self, question: str, tenant_id: str) -> Tuple[str, Dict[str, Any]]:
        """üéØ Main Method: ‡πÉ‡∏ä‡πâ Universal Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL Generation"""
        
        try:
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Universal Prompt
            universal_prompt = self.universal_prompt.generate_sql_prompt(question, tenant_id)
            
            config = self.original_agent.tenant_configs[tenant_id]
            
            # 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏î‡πâ‡∏ß‡∏¢ Universal Prompt
            ai_response = await self.original_agent.ai_service.call_ollama_api(
                config, universal_prompt, temperature=0.05  # ‡πÉ‡∏ä‡πâ temp ‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            )
            
            # 3. Extract SQL
            sql_query = self._extract_sql_safely(ai_response, tenant_id)
            
            # 4. Validate ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Type Safety
            if self.sql_validator.has_type_safety_issues(sql_query):
                logger.warning("üîß Fixing type safety issues...")
                sql_query = self.sql_validator.fix_type_safety_issues(sql_query)
            
            # 5. Final validation
            if not self._final_validation(sql_query, tenant_id):
                raise ValueError("SQL failed final validation")
            
            metadata = {
                'method': 'universal_prompt_system',
                'business_type': self.universal_prompt.company_contexts.get(tenant_id, {}).business_type if tenant_id in self.universal_prompt.company_contexts else 'unknown',
                'confidence': 'high',
                'prompt_length': len(universal_prompt),
                'type_safety_applied': self.sql_validator.has_type_safety_issues(ai_response),
                'template_used': self._get_template_type(tenant_id)
            }
            
            return sql_query, metadata
            
        except Exception as e:
            logger.error(f"Universal prompt generation failed for {tenant_id}: {e}")
            # Fallback to original method
            return await self.original_agent.original_generate_enhanced_sql(question, tenant_id)
    
    def _extract_sql_safely(self, ai_response: str, tenant_id: str) -> str:
        """Extract SQL with enhanced safety checks"""
        
        # ‡πÉ‡∏ä‡πâ extraction logic ‡πÄ‡∏î‡∏¥‡∏°
        sql = self.original_agent._extract_and_validate_sql(ai_response, tenant_id)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° safety checks
        if not sql or sql.strip() == "":
            raise ValueError("Empty SQL extracted")
        
        if len(sql) < 20:  # SQL ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            raise ValueError("SQL too short to be valid")
        
        return sql
    
    def _final_validation(self, sql: str, tenant_id: str) -> bool:
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        
        try:
            # ‡πÉ‡∏ä‡πâ validator ‡πÄ‡∏î‡∏¥‡∏°
            return self.original_agent.database_handler.validate_sql_query(sql, tenant_id)
        except:
            return True  # ‡∏ñ‡πâ‡∏≤ validator ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
    
    def _get_template_type(self, tenant_id: str) -> str:
        """‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó template ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
        
        if tenant_id not in self.universal_prompt.company_contexts:
            return 'fallback'
        
        context = self.universal_prompt.company_contexts[tenant_id]
        
        if context.language == 'en':
            return 'english_international'
        elif context.business_type == 'tourism_hospitality':
            return 'thai_tourism'
        else:
            return 'thai_enterprise'

# üîß Integration Helper - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
class EnhancedAgentWithUniversalPrompt:
    """üöÄ Enhanced Agent ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Universal Prompt System"""
    
    def __init__(self, original_agent):
        self.original_agent = original_agent
        self.universal_integration = UniversalPromptIntegration(original_agent)
        
        # Override ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ generate_enhanced_sql method
        self.original_generate_enhanced_sql = original_agent.generate_enhanced_sql
        original_agent.generate_enhanced_sql = self.generate_enhanced_sql_with_universal_prompt
        
        logger.info("üöÄ Enhanced Agent with Universal Prompt System initialized")
    
    # üîß FIX: Delegate ‡∏ó‡∏∏‡∏Å method ‡πÑ‡∏õ‡∏¢‡∏±‡∏á original_agent
    def __getattr__(self, name):
        """Delegate all methods to original_agent"""
        return getattr(self.original_agent, name)
    
    async def generate_enhanced_sql_with_universal_prompt(self, question: str, tenant_id: str) -> Tuple[str, Dict[str, Any]]:
        """üéØ ‡πÉ‡∏ä‡πâ Universal Prompt System"""
        try:
            return await self.universal_integration.generate_enhanced_sql_with_universal_prompt(
                question, tenant_id
            )
        except Exception as e:
            logger.warning(f"üîÑ Universal prompt failed: {e}, falling back...")
            return await self.original_generate_enhanced_sql(question, tenant_id)
    
    def get_universal_prompt_stats(self) -> Dict[str, Any]:
        """üìä ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Universal Prompt System"""
        contexts = self.universal_integration.universal_prompt.company_contexts
        return {
            "universal_prompt_enabled": True,
            "registered_companies": len(contexts),
            "company_details": [
                {
                    "tenant_id": ctx.tenant_id,
                    "name": ctx.name,
                    "business_type": ctx.business_type,
                    "language": ctx.language,
                    "has_schema": len(ctx.schema_info) > 0,
                    "has_business_rules": len(ctx.business_rules) > 0,
                    "common_queries_count": len(ctx.common_queries)
                }
                for ctx in contexts.values()
            ],
            "type_safety_validator": "active",
            "template_types": ["thai_enterprise", "thai_tourism", "english_international"],
            "fallback_available": True
        }

class UniversalPromptMigrationGuide:
    """üìñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ migrate ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Universal Prompt System"""
    
    @staticmethod
    def integrate_with_existing_agent(original_agent):
        """üîß Integration ‡∏Å‡∏±‡∏ö Agent ‡πÄ‡∏î‡∏¥‡∏° - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        
        print("üöÄ Starting Universal Prompt System Integration...")
        print("=" * 60)
        
        try:
            # üîß FIX: ‡πÉ‡∏ä‡πâ approach ‡πÉ‡∏´‡∏°‡πà - ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper class
            from .universal_prompt_system import UniversalPromptIntegration
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á integration
            universal_integration = UniversalPromptIntegration(original_agent)
            
            # ‡πÄ‡∏Å‡πá‡∏ö original methods
            original_generate_enhanced_sql = original_agent.generate_enhanced_sql
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced method
            async def enhanced_sql_with_universal_prompt(question: str, tenant_id: str):
                try:
                    logger.info(f"üéØ Using Universal Prompt for: {question[:50]}...")
                    return await universal_integration.generate_enhanced_sql_with_universal_prompt(
                        question, tenant_id
                    )
                except Exception as e:
                    logger.warning(f"üîÑ Universal prompt failed: {e}, falling back...")
                    return await original_generate_enhanced_sql(question, tenant_id)
            
            # Apply enhancement ‡πÑ‡∏õ‡∏¢‡∏±‡∏á original agent ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            original_agent.generate_enhanced_sql = enhanced_sql_with_universal_prompt
            original_agent.universal_integration = universal_integration
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° stats method
            def get_universal_prompt_stats():
                contexts = universal_integration.universal_prompt.company_contexts
                return {
                    "universal_prompt_enabled": True,
                    "registered_companies": len(contexts),
                    "company_details": [
                        {
                            "tenant_id": ctx.tenant_id,
                            "name": ctx.name,
                            "business_type": ctx.business_type,
                            "language": ctx.language,
                            "has_schema": len(ctx.schema_info) > 0,
                            "has_business_rules": len(ctx.business_rules) > 0,
                            "common_queries_count": len(ctx.common_queries)
                        }
                        for ctx in contexts.values()
                    ],
                    "type_safety_validator": "active",
                    "template_types": ["thai_enterprise", "thai_tourism", "english_international"],
                    "fallback_available": True
                }
            
            original_agent.get_universal_prompt_stats = get_universal_prompt_stats
            
            print("‚úÖ Universal Prompt System applied directly to original agent")
            print("üîß No wrapper class created - all methods delegated properly")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ methods ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            important_methods = ['process_enhanced_question', 'generate_enhanced_sql']
            for method_name in important_methods:
                if hasattr(original_agent, method_name):
                    print(f"   ‚úÖ {method_name}: Available")
                else:
                    print(f"   ‚ùå {method_name}: Missing")
            
            return original_agent  # üîß FIX: ‡∏Ñ‡∏∑‡∏ô original agent ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà wrapper
            
        except Exception as e:
            print(f"‚ùå Integration failed: {e}")
            print("üîÑ Your original agent remains unchanged")
            return original_agent

# üìù Usage Instructions
"""
üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Universal Prompt System:

1. Integration ‡∏Å‡∏±‡∏ö Agent ‡πÄ‡∏î‡∏¥‡∏°:
   ```python
   from refactored_modules.universal_prompt_system import UniversalPromptMigrationGuide
   
   # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ original agent
   enhanced_agent = UniversalPromptMigrationGuide.integrate_with_existing_agent(original_agent)
   ```

2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:
   ```python
   UniversalPromptMigrationGuide.test_universal_prompts(enhanced_agent)
   ```

3. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥:
   ```python
   # ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ Universal Prompt ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   result = await enhanced_agent.process_enhanced_question(question, tenant_id)
   ```

4. ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
   ```python
   stats = enhanced_agent.get_universal_prompt_stats()
   print(json.dumps(stats, indent=2, ensure_ascii=False))
   ```

üéØ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
‚úÖ Type-safe SQL generation (‡πÑ‡∏°‡πà error ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á date/string)
‚úÖ Business context-aware prompts
‚úÖ Easy to add new companies
‚úÖ Automatic fallback to original system
‚úÖ Multi-language support (Thai/English)
‚úÖ Template-based architecture

üîß ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Company ‡πÉ‡∏´‡∏°‡πà:
```python
new_context = CompanyContext(
    tenant_id='company-d',
    name='New Company',
    business_type='new_business_type',
    language='th',
    schema_info=schema_data,
    business_rules=rules_data,
    common_queries=questions,
    sql_patterns=patterns
)

enhanced_agent.universal_integration.universal_prompt.register_company(new_context)
```
"""

# üéØ Export main classes
__all__ = [
    'UniversalPromptGenerator',
    'UniversalPromptIntegration', 
    'EnhancedAgentWithUniversalPrompt',
    'UniversalPromptMigrationGuide',
    'CompanyContext',
    'TypeSafetySQLValidator'
]