# prompt_generator.py
# üìù AI Prompt Generation Service

from typing import Dict, Any, List, Tuple
import logging
from .tenant_config import TenantConfig
from .schema_discovery import SchemaDiscoveryService
from .business_logic_mapper import BusinessLogicMapper

logger = logging.getLogger(__name__)

class PromptGenerator:
    """üìù Generates enhanced prompts for AI interactions"""
    
    def __init__(self, schema_service: SchemaDiscoveryService, 
                 business_mapper: BusinessLogicMapper):
        self.schema_service = schema_service
        self.business_mapper = business_mapper
    
    def create_enhanced_sql_prompt(self, question: str, schema_info: Dict, 
                                  business_logic: Dict, config: TenantConfig) -> str:
        """Create enhanced SQL generation prompt with business intelligence"""
        
        # Format schema information with business context
        schema_text = self._format_enhanced_schema(schema_info, config.language)
        
        # Format business logic rules
        business_rules = self._format_business_logic(business_logic, config.language)
        
        if config.language == 'en':
            prompt = f"""You are an expert PostgreSQL business analyst for {config.name}.

COMPANY PROFILE:
- Business Type: {config.business_type}
- Key Focus: {schema_info.get('business_context', {}).get('primary_focus', 'Business operations')}
- Client Profile: {schema_info.get('business_context', {}).get('client_profile', 'Various clients')}
- Project Scale: {schema_info.get('business_context', {}).get('project_scale', 'Various scales')}

{schema_text}

{business_rules}

ADVANCED SQL GENERATION RULES:
1. ALWAYS use explicit column names (never SELECT *)
2. ALWAYS include LIMIT (max 20 rows) unless doing aggregation/counting
3. Use proper table aliases: employees e, projects p, employee_projects ep
4. Format money appropriately based on business context
5. Use ILIKE for case-insensitive text searches
6. Handle NULL values with COALESCE where appropriate
7. Use proper JOINs with clear relationships
8. Add meaningful ORDER BY clauses for better insights
9. Group related data logically for business analysis
10. Use subqueries when necessary for complex business logic

BUSINESS INTELLIGENCE PATTERNS:
- Employee analysis: Include department, position, salary context
- Project analysis: Include budget, client, team size, status
- Performance metrics: Use aggregations with business meaning
- Cross-table analysis: Join tables to provide comprehensive insights

SQL QUALITY STANDARDS:
- Readable formatting with proper indentation
- Business-meaningful column aliases
- Appropriate data type handling
- Optimized for PostgreSQL performance

USER QUESTION: {question}

Generate only the PostgreSQL query that provides comprehensive business insights:"""
        
        else:  # Thai
            prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {config.business_type}
- ‡∏à‡∏∏‡∏î‡πÄ‡∏ô‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å: {schema_info.get('business_context', {}).get('primary_focus', '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à')}
- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {schema_info.get('business_context', {}).get('client_profile', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢')}
- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {schema_info.get('business_context', {}).get('project_scale', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢')}

{schema_text}

{business_rules}

‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:
1. ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ SELECT *)
2. ‡πÉ‡∏™‡πà LIMIT ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡πÅ‡∏ñ‡∏ß) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
3. ‡πÉ‡∏ä‡πâ table aliases: employees e, projects p, employee_projects ep
4. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
5. ‡πÉ‡∏ä‡πâ ILIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà-‡πÄ‡∏•‡πá‡∏Å)
6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NULL ‡∏î‡πâ‡∏ß‡∏¢ COALESCE ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
7. ‡πÉ‡∏ä‡πâ JOIN ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
8. ‡πÄ‡∏û‡∏¥‡πà‡∏° ORDER BY ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ insight ‡∏ó‡∏µ‡πà‡∏î‡∏µ
9. ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
10. ‡πÉ‡∏ä‡πâ subquery ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö business logic ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô

‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Business Intelligence:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏ú‡∏ô‡∏Å ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ‡∏£‡∏ß‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡∏° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
- ‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ insight ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°

‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û SQL:
- ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ alias ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ data type ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PostgreSQL query ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ business insights ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:"""
        
        return prompt
    
    def create_enhanced_interpretation_prompt(self, question: str, sql_query: str, 
                                            results: List[Dict], tenant_config: TenantConfig,
                                            schema_info: Dict) -> str:
        """üß† Smart interpretation prompt ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ AI"""
        
        # üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        question_context = self._analyze_question_context(question, sql_query, results)
        
        # üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô structured format
        processed_data = self._process_results_intelligently(results, question_context)
        
        # üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á context-aware prompt ‡πÅ‡∏ö‡∏ö dynamic
        return self._create_dynamic_interpretation_prompt(
            question, processed_data, question_context, tenant_config, schema_info
        )

    def _analyze_question_context(self, question: str, sql_query: str, results: List[Dict]) -> Dict[str, Any]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå context ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        
        question_lower = question.lower()
        sql_upper = sql_query.upper()
        
        context = {
            'query_type': 'general',
            'data_structure': 'simple',
            'response_style': 'analytical',
            'focus_area': 'summary'
        }
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö assignment queries
        if ('‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô' in question_lower or 'each' in question_lower) and 'LEFT JOIN' in sql_upper:
            context.update({
                'query_type': 'assignment',
                'data_structure': 'relational', 
                'response_style': 'listing',
                'focus_area': 'individual_items'
            })
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö project queries
        elif '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' in question_lower or 'project' in question_lower:
            context.update({
                'query_type': 'project',
                'response_style': 'listing',
                'focus_area': 'items_with_details'
            })
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö counting/aggregation queries
        elif any(word in question_lower for word in ['‡∏Å‡∏µ‡πà', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'how many', 'count']):
            context.update({
                'query_type': 'counting',
                'response_style': 'statistical',
                'focus_area': 'numbers_and_trends'
            })
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö financial queries
        elif any(word in question_lower for word in ['‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'budget', 'salary']):
            context.update({
                'query_type': 'financial',
                'response_style': 'analytical',
                'focus_area': 'numbers_with_context'
            })
        
        return context

    def _process_results_intelligently(self, results: List[Dict], context: Dict[str, Any]) -> Dict[str, Any]:
        """üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏ï‡∏≤‡∏° context"""
        
        if not results:
            return {'type': 'empty', 'message': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
        
        processed = {
            'raw_count': len(results),
            'summary': {},
            'highlights': [],
            'formatted_display': ''
        }
        
        # üéØ Assignment query processing
        if context['query_type'] == 'assignment':
            return self._process_assignment_data(results)
        
        # üéØ Project query processing
        elif context['query_type'] == 'project':
            return self._process_project_data(results)
        
        # üéØ Financial query processing
        elif context['query_type'] == 'financial':
            return self._process_financial_data(results)
        
        # üéØ Counting query processing
        elif context['query_type'] == 'counting':
            return self._process_counting_data(results)
        
        # üéØ General processing
        else:
            return self._process_general_data(results)

    def _process_assignment_data(self, results: List[Dict]) -> Dict[str, Any]:
        """üë• ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• assignment ‡πÅ‡∏ö‡∏ö smart"""
        
        employees_with_projects = []
        employees_without_projects = []
        
        # Group by employee
        employee_data = {}
        for row in results:
            emp_name = row.get('name', 'Unknown')
            project = row.get('project_name', '')
            role = row.get('role', '')
            
            if emp_name not in employee_data:
                employee_data[emp_name] = {
                    'name': emp_name,
                    'projects': [],
                    'position': row.get('position', ''),
                    'department': row.get('department', '')
                }
            
            # Handle project assignment
            if project and '‡πÑ‡∏°‡πà‡∏°‡∏µ' not in str(project):
                role_display = role if role and '‡πÑ‡∏°‡πà‡∏°‡∏µ' not in str(role) else '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
                employee_data[emp_name]['projects'].append({
                    'name': project,
                    'role': role_display
                })
        
        # Categorize employees
        for emp_name, emp_info in employee_data.items():
            if emp_info['projects']:
                for project in emp_info['projects']:
                    employees_with_projects.append({
                        'employee': emp_name,
                        'project': project['name'],
                        'role': project['role']
                    })
            else:
                employees_without_projects.append({
                    'employee': emp_name,
                    'position': emp_info['position'],
                    'department': emp_info['department']
                })
        
        # Create structured display
        display_lines = []
        
        if employees_with_projects:
            display_lines.append("‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:")
            for item in employees_with_projects[:10]:  # Limit display
                display_lines.append(f"‚Ä¢ {item['employee']} ‚Üí {item['project']} ({item['role']})")
        
        if employees_without_projects:
            display_lines.append("\n‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:")
            for item in employees_without_projects[:5]:  # Limit display
                display_lines.append(f"‚Ä¢ {item['employee']} ({item['position']} - {item['department']})")
        
        return {
            'type': 'assignment',
            'employees_with_projects': len(employees_with_projects),
            'employees_without_projects': len(employees_without_projects),
            'total_employees': len(employee_data),
            'display_data': employees_with_projects + employees_without_projects,
            'formatted_display': '\n'.join(display_lines),
            'summary': {
                'with_projects': len(employees_with_projects),
                'without_projects': len(employees_without_projects),
                'utilization_rate': round(len(employees_with_projects) / len(employee_data) * 100, 1) if employee_data else 0
            }
        }

    def _process_project_data(self, results: List[Dict]) -> Dict[str, Any]:
        """üöÄ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• project ‡πÅ‡∏ö‡∏ö smart"""
        
        projects = []
        total_budget = 0
        
        for row in results:
            project_info = {
                'name': row.get('name', 'Unknown'),
                'client': row.get('client', 'Unknown'),
                'budget': row.get('budget', 0),
                'status': row.get('status', 'Unknown')
            }
            projects.append(project_info)
            
            if isinstance(project_info['budget'], (int, float)):
                total_budget += project_info['budget']
        
        # Sort by budget (descending)
        projects.sort(key=lambda x: x['budget'] if isinstance(x['budget'], (int, float)) else 0, reverse=True)
        
        # Create display
        display_lines = []
        active_projects = [p for p in projects if p['status'] == 'active']
        completed_projects = [p for p in projects if p['status'] == 'completed']
        
        if active_projects:
            display_lines.append("‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:")
            for proj in active_projects[:5]:
                budget_display = f"{proj['budget']:,.0f} ‡∏ö‡∏≤‡∏ó" if isinstance(proj['budget'], (int, float)) else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                display_lines.append(f"‚Ä¢ {proj['name']} - {proj['client']} ({budget_display})")
        
        if completed_projects:
            display_lines.append("\n‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:")
            for proj in completed_projects[:3]:
                budget_display = f"{proj['budget']:,.0f} ‡∏ö‡∏≤‡∏ó" if isinstance(proj['budget'], (int, float)) else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                display_lines.append(f"‚Ä¢ {proj['name']} - {proj['client']} ({budget_display})")
        
        return {
            'type': 'project',
            'total_projects': len(projects),
            'active_projects': len(active_projects),
            'completed_projects': len(completed_projects),
            'total_budget': total_budget,
            'avg_budget': total_budget / len(projects) if projects else 0,
            'display_data': projects,
            'formatted_display': '\n'.join(display_lines),
            'highlights': [
                f"‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(projects)} ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ",
                f"‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°: {total_budget:,.0f} ‡∏ö‡∏≤‡∏ó",
                f"‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {total_budget / len(projects):,.0f} ‡∏ö‡∏≤‡∏ó" if projects else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"
            ]
        }

    def _process_financial_data(self, results: List[Dict]) -> Dict[str, Any]:
        """üí∞ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"""
        
        amounts = []
        for row in results:
            for key, value in row.items():
                if key in ['salary', 'budget', 'amount', 'price'] and isinstance(value, (int, float)):
                    amounts.append(value)
        
        if not amounts:
            return {'type': 'financial', 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'}
        
        return {
            'type': 'financial',
            'total_amount': sum(amounts),
            'avg_amount': sum(amounts) / len(amounts),
            'max_amount': max(amounts),
            'min_amount': min(amounts),
            'count': len(amounts),
            'formatted_display': f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {sum(amounts):,.0f} ‡∏ö‡∏≤‡∏ó, ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {sum(amounts)/len(amounts):,.0f} ‡∏ö‡∏≤‡∏ó, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {max(amounts):,.0f} ‡∏ö‡∏≤‡∏ó"
        }

    def _process_counting_data(self, results: List[Dict]) -> Dict[str, Any]:
        """üî¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö"""
        
        return {
            'type': 'counting',
            'total_count': len(results),
            'formatted_display': f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        }

    def _process_general_data(self, results: List[Dict]) -> Dict[str, Any]:
        """üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        
        return {
            'type': 'general',
            'total_records': len(results),
            'sample_data': results[:5],
            'formatted_display': f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        }

    def _create_dynamic_interpretation_prompt(self, question: str, processed_data: Dict[str, Any], 
                                            context: Dict[str, Any], tenant_config: TenantConfig,
                                            schema_info: Dict) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á dynamic prompt ‡∏ï‡∏≤‡∏° context ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
        
        if tenant_config.language == 'th':
            base_prompt = f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {tenant_config.name}

    üéØ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}
    üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {processed_data.get('type', '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')}
    üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {processed_data.get('raw_count', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

    """
        else:
            base_prompt = f"""You are a direct answer assistant for {tenant_config.name}

    üéØ Question: {question}
    üìä Data Type: {processed_data.get('type', 'general')}
    üìà Record Count: {processed_data.get('raw_count', 0)} records

    """
        
        # üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° context-specific guidance
        if context['response_style'] == 'listing':
            if tenant_config.language == 'th':
                base_prompt += """‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    ‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
    ‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
    ‚Ä¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡∏≤‡∏ß‡πÜ

    """
            else:
                base_prompt += """‚ö†Ô∏è Important: List-style response
    ‚Ä¢ Show names and useful details
    ‚Ä¢ Organize data systematically  
    ‚Ä¢ Avoid lengthy statistical analysis

    """
        
        elif context['response_style'] == 'statistical':
            if tenant_config.language == 'th':
                base_prompt += """‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    ‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    ‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    ‚Ä¢ ‡πÉ‡∏´‡πâ insights ‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à

    """
        
        # üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        base_prompt += f"""üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß:
    {processed_data.get('formatted_display', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞')}

    """
        
        # üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° summary ‡∏´‡∏≤‡∏Å context ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if 'summary' in processed_data:
            summary = processed_data['summary']
            if tenant_config.language == 'th':
                base_prompt += f"""üí° ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {summary}

    """
        
        if tenant_config.language == 'th':
            base_prompt += """‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô:"""
        else:
            base_prompt += """Please answer the question using the processed data above, focusing on clarity and directness:"""
        
        return base_prompt

    def _create_data_interpretation_rules_en(self, data_analysis: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        rules = []
        
        rules.append("1. Read data as it is, without misinterpretation")
        rules.append("2. Calculate percentages and numbers from actual data only")
        
        if data_analysis.get('has_null_substitutes'):
            rules.append("3. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' = employees without project assignments (not a project name)")
            rules.append("4. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó' = no defined role in system (not a job position)")
        
        if data_analysis.get('business_context', {}).get('query_type') == 'employee_assignment_analysis':
            rules.append("5. üéØ This is assignment analysis focusing on resource allocation")
            rules.append("6. üéØ Business impact: human resource utilization and workload balance")
        
        rules.append("7. ‚ùå Never create conclusions without data evidence")
        rules.append("8. ‚ùå Never guess or assume missing data")
        
        return '\n'.join(rules)
    
    def _generate_enhanced_data_insights(self, results: List[Dict], data_analysis: Dict, tenant_id: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á insights ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á"""
        if not results:
            return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        
        insights = []
        
        # Insights ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assignment analysis
        if data_analysis.get('business_context', {}).get('query_type') == 'employee_assignment_analysis':
            assignment_stats = data_analysis.get('employee_assignments', {})
            
            if assignment_stats:
                utilization = assignment_stats.get('utilization_rate', 0)
                without_projects = assignment_stats.get('without_projects', 0)
                
                if utilization < 80:
                    insights.append(f"‚ö†Ô∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {utilization}% ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")
                
                if without_projects > 0:
                    insights.append(f"üí° ‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô {without_projects} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
                    insights.append("üíº ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞")
                
                if utilization > 90:
                    insights.append("‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ")
        
        # Insights ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        else:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå numerical patterns
            numerical_columns = []
            for key, value in results[0].items():
                if isinstance(value, (int, float)) and key not in ['id']:
                    numerical_columns.append(key)
            
            for col in numerical_columns:
                values = [row.get(col, 0) for row in results if row.get(col) is not None]
                if values:
                    avg_val = sum(values) / len(values)
                    max_val = max(values)
                    min_val = min(values)
                    
                    if col in ['salary', 'budget']:
                        currency = "USD" if tenant_id == 'company-c' else "‡∏ö‡∏≤‡∏ó"
                        insights.append(f"üí∞ {col}: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_val:,.0f} {currency}, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_val:,.0f} {currency}")
                    else:
                        insights.append(f"üìä {col}: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_val:.1f}, ‡∏ä‡πà‡∏ß‡∏á {min_val}-{max_val}")
        
        return '\n'.join(insights) if insights else "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©"
    
    def _format_general_results(self, results: List[Dict], tenant_id: str) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        formatted = ""
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        display_results = results[:5]
        
        for i, row in enumerate(display_results, 1):
            formatted += f"{i}. "
            
            for key, value in row.items():
                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if key in ['salary', 'budget'] and isinstance(value, (int, float)):
                    currency = "USD" if tenant_id == 'company-c' else "‡∏ö‡∏≤‡∏ó"
                    formatted += f"{key}: {value:,.0f} {currency}, "
                elif key in ['allocation'] and isinstance(value, float):
                    formatted += f"{key}: {value*100:.1f}%, "
                elif isinstance(value, (int, float)):
                    formatted += f"{key}: {value:,.0f}, "
                else:
                    formatted += f"{key}: {value}, "
            
            formatted = formatted.rstrip(", ") + "\n"
        
        if len(results) > 5:
            formatted += f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(results) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        
        return formatted
    
    def _format_results_with_data_awareness(self, results: List[Dict], data_analysis: Dict, tenant_id: str) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if not results:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
        
        formatted = "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n"
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if data_analysis.get('business_context', {}).get('query_type') == 'employee_assignment_analysis':
            formatted += self._format_assignment_analysis_results(results, data_analysis)
        else:
            formatted += self._format_general_results(results, tenant_id)
        
        return formatted
    
    def _format_assignment_analysis_results(self, results: List[Dict], data_analysis: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assignment analysis"""
        formatted = ""
        
        # ‡πÅ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô vs ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
        employees_with_projects = []
        employees_without_projects = []
        
        for row in results:
            project_name = str(row.get('project_name', ''))
            if '‡πÑ‡∏°‡πà‡∏°‡∏µ' in project_name:
                employees_without_projects.append(row)
            else:
                employees_with_projects.append(row)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
        assignment_stats = data_analysis.get('employee_assignments', {})
        if assignment_stats:
            formatted += f"""
üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:
‚Ä¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {assignment_stats.get('with_projects', 0)} ‡∏Ñ‡∏ô
‚Ä¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {assignment_stats.get('without_projects', 0)} ‡∏Ñ‡∏ô
‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£: {assignment_stats.get('utilization_rate', 0)}%

"""
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
        if employees_with_projects:
            formatted += f"üë• ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ({len(employees_with_projects)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n"
            for i, row in enumerate(employees_with_projects[:5], 1):
                formatted += f"  {i}. {row.get('employee_name', 'N/A')} ‚Üí {row.get('project_name', 'N/A')} ({row.get('time_allocation', '0%')})\n"
            
            if len(employees_with_projects) > 5:
                formatted += f"  ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(employees_with_projects) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
        if employees_without_projects:
            formatted += f"\nüö´ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ({len(employees_without_projects)} ‡∏Ñ‡∏ô):\n"
            for i, row in enumerate(employees_without_projects[:5], 1):
                formatted += f"  {i}. {row.get('employee_name', 'N/A')} - {row.get('position', 'N/A')} ({row.get('department', 'N/A')})\n"
        
        return formatted
    def _analyze_results_structure(self, results: List[Dict], sql_query: str, question: str) -> Dict[str, Any]:
        """üî• NEW: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        analysis = {
            'total_records': len(results),
            'has_null_substitutes': False,
            'null_substitute_patterns': [],
            'employee_assignments': {},
            'data_categories': {},
            'business_context': {}
        }
        
        if not results:
            return analysis
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ COALESCE results (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó, etc.)
        for key in results[0].keys():
            values = [str(row.get(key, '')) for row in results]
            
            # ‡∏´‡∏≤ pattern ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å COALESCE
            null_substitutes = [v for v in values if '‡πÑ‡∏°‡πà‡∏°‡∏µ' in v or v == '-' or v == '0%']
            if null_substitutes:
                analysis['has_null_substitutes'] = True
                analysis['null_substitute_patterns'].append({
                    'field': key,
                    'substitute_count': len(null_substitutes),
                    'total_count': len(values),
                    'percentage': round(len(null_substitutes) / len(values) * 100, 1),
                    'substitute_values': list(set(null_substitutes)),
                    'meaning': self._interpret_null_substitute(key, null_substitutes[0] if null_substitutes else '')
                })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå assignment patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        if '‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô' in question and '‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö' in question:
            analysis['business_context'] = {
                'query_type': 'employee_assignment_analysis',
                'focus': 'resource_allocation_and_workload_distribution'
            }
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô vs ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
            employees_with_projects = []
            employees_without_projects = []
            
            for row in results:
                project_name = str(row.get('project_name', ''))
                employee_name = row.get('employee_name', '')
                
                if '‡πÑ‡∏°‡πà‡∏°‡∏µ' in project_name:
                    employees_without_projects.append(employee_name)
                else:
                    employees_with_projects.append(employee_name)
            
            analysis['employee_assignments'] = {
                'with_projects': len(set(employees_with_projects)),
                'without_projects': len(set(employees_without_projects)),
                'total_employees': len(set([row.get('employee_name', '') for row in results])),
                'utilization_rate': round(len(set(employees_with_projects)) / len(set([row.get('employee_name', '') for row in results])) * 100, 1) if results else 0
            }
        
        return analysis
    
    def _interpret_null_substitute(self, field_name: str, substitute_value: str) -> str:
        """‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å substitute"""
        interpretations = {
            'project_name': {
                '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ': '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô': '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
            },
            'project_role': {
                '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
                '-': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
            },
            'time_allocation': {
                '0%': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                '-': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏ß‡∏•‡∏≤'
            }
        }
        
        return interpretations.get(field_name, {}).get(substitute_value, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤')
    
    def _create_data_interpretation_rules_th(self, data_analysis: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        rules = []
        
        # ‡∏Å‡∏é‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        rules.append("1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î")
        rules.append("2. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        
        # ‡∏Å‡∏é‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö COALESCE data
        if data_analysis.get('has_null_substitutes'):
            rules.append("3. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' = ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)")
            rules.append("4. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó' = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô)")
            rules.append("5. ‚ö†Ô∏è '0%' = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 0 ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)")
        
        # ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assignment analysis
        if data_analysis.get('business_context', {}).get('query_type') == 'employee_assignment_analysis':
            rules.append("6. üéØ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô resource allocation")
            rules.append("7. üéØ ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô")
        
        rules.append("8. ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        rules.append("9. ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ")
        
        return '\n'.join(rules)
    
    def _create_data_interpretation_rules_en(self, data_analysis: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        rules = []
        
        rules.append("1. Read data as it is, without misinterpretation")
        rules.append("2. Calculate percentages and numbers from actual data only")
        
        if data_analysis.get('has_null_substitutes'):
            rules.append("3. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' = employees without project assignments (not a project name)")
            rules.append("4. ‚ö†Ô∏è '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó' = no defined role in system (not a job position)")
        
        if data_analysis.get('business_context', {}).get('query_type') == 'employee_assignment_analysis':
            rules.append("5. üéØ This is assignment analysis focusing on resource allocation")
            rules.append("6. üéØ Business impact: human resource utilization and workload balance")
        
        rules.append("7. ‚ùå Never create conclusions without data evidence")
        rules.append("8. ‚ùå Never guess or assume missing data")
        
        return '\n'.join(rules)
    
 
    def _format_enhanced_schema(self, schema_info: Dict, language: str) -> str:
        """Format enhanced schema information with business context"""
        if language == 'en':
            formatted = f"DATABASE SCHEMA:\n"
            formatted += f"Business Context: {schema_info.get('business_context', {}).get('primary_focus', 'N/A')}\n\n"
        else:
            formatted = f"‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n"
            formatted += f"‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {schema_info.get('business_context', {}).get('primary_focus', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n\n"
        
        tables = schema_info.get('tables', {})
        for table_name, table_info in tables.items():
            if language == 'en':
                formatted += f"üìã TABLE: {table_name}\n"
                formatted += f"   Description: {table_info.get('description', 'N/A')}\n"
                formatted += f"   Business Value: {table_info.get('business_significance', 'N/A')}\n"
                formatted += f"   Key Insights: {table_info.get('key_insights', 'N/A')}\n"
                formatted += f"   Columns:\n"
            else:
                formatted += f"üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table_name}\n"
                formatted += f"   ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {table_info.get('description', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                formatted += f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {table_info.get('business_significance', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                formatted += f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {table_info.get('key_insights', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                formatted += f"   ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:\n"
            
            for column in table_info.get('columns', []):
                formatted += f"      ‚Ä¢ {column}\n"
            formatted += "\n"
        
        return formatted
    
    def _format_business_logic(self, business_logic: Dict, language: str) -> str:
        """Format business logic rules for AI understanding"""
        if not business_logic:
            return ""
        
        if language == 'en':
            formatted = "BUSINESS LOGIC MAPPINGS:\n"
        else:
            formatted = "‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à:\n"
        
        for category, rules in business_logic.items():
            if language == 'en':
                formatted += f"‚Ä¢ {category.replace('_', ' ').title()}:\n"
            else:
                category_thai = {
                    'employee_levels': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                    'project_sizes': '‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
                    'departments': '‡πÅ‡∏ú‡∏ô‡∏Å‡∏á‡∏≤‡∏ô',
                    'time_periods': '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
                    'performance_indicators': '‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏á‡∏≤‡∏ô',
                    'project_types': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
                    'regional_focus': '‡πÄ‡∏ô‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
                    'market_tiers': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î',
                    'geographic_regions': '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'
                }
                formatted += f"‚Ä¢ {category_thai.get(category, category)}:\n"
            
            for term, condition in rules.items():
                formatted += f"  - {term}: {condition}\n"
            formatted += "\n"
        
        return formatted
    
    def _format_results_with_context(self, results: List[Dict], tenant_id: str) -> str:
        """Format database results with business context"""
        if not results:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
        
        formatted = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n"
        
        # Show first 10 results with formatting
        for i, row in enumerate(results[:10], 1):
            formatted += f"{i}. "
            for key, value in row.items():
                # Format based on data type and business context
                if key in ['salary', 'budget'] and isinstance(value, (int, float)):
                    if tenant_id == 'company-c':
                        formatted += f"{key}: ${value:,.0f}, "
                    else:
                        formatted += f"{key}: {value:,.0f} ‡∏ö‡∏≤‡∏ó, "
                elif key in ['allocation'] and isinstance(value, float):
                    formatted += f"{key}: {value*100:.1f}%, "
                elif isinstance(value, (int, float)):
                    formatted += f"{key}: {value:,.0f}, "
                else:
                    formatted += f"{key}: {value}, "
            formatted = formatted.rstrip(", ") + "\n"
        
        if len(results) > 10:
            formatted += f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(results) - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        
        return formatted
    
    def _generate_data_insights(self, results: List[Dict], tenant_id: str) -> str:
        """Generate business insights from query results"""
        if not results:
            return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        
        insights = []
        
        # Analyze numerical patterns
        numerical_columns = []
        for key, value in results[0].items():
            if isinstance(value, (int, float)) and key not in ['id']:
                numerical_columns.append(key)
        
        for col in numerical_columns:
            values = [row.get(col, 0) for row in results if row.get(col) is not None]
            if values:
                avg_val = sum(values) / len(values)
                max_val = max(values)
                min_val = min(values)
                
                if col in ['salary', 'budget']:
                    currency = "USD" if tenant_id == 'company-c' else "‡∏ö‡∏≤‡∏ó"
                    insights.append(f"- {col}: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_val:,.0f} {currency}, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_val:,.0f} {currency}, ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î {min_val:,.0f} {currency}")
                else:
                    insights.append(f"- {col}: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_val:.1f}, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_val}, ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î {min_val}")
        
        # Analyze categorical patterns
        categorical_columns = []
        for key, value in results[0].items():
            if isinstance(value, str) and key not in ['name', 'email', 'description']:
                categorical_columns.append(key)
        
        for col in categorical_columns:
            values = [row.get(col) for row in results if row.get(col)]
            if values:
                unique_count = len(set(values))
                most_common = max(set(values), key=values.count)
                insights.append(f"- {col}: {unique_count} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏û‡∏ö '{most_common}' ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        
        return "\n".join(insights) if insights else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"