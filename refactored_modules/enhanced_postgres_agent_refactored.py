# refactored_modules/enhanced_postgres_agent_refactored.py
# üéØ Enhanced PostgreSQL Agent - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà IntentClassifier ‡∏î‡πâ‡∏ß‡∏¢ Simple Logic

import os
import time
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
import logging
import re
from decimal import Decimal

# Import essential modules only (‡∏•‡∏ö IntentClassifier)
from .tenant_config import TenantConfigManager, TenantConfig
from .database_handler import DatabaseHandler
from .ai_service import AIService

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedPostgresOllamaAgent:
    """üéØ Enhanced PostgreSQL Agent - Simple Intent Logic (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ IntentClassifier)"""
    
    def __init__(self):
        """üèóÔ∏è Initialize without IntentClassifier"""
        self.config_manager = TenantConfigManager()
        self.tenant_configs = self.config_manager.tenant_configs
        self.database_handler = DatabaseHandler(self.tenant_configs)
        self.ai_service = AIService()
        
        # ‚ùå ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: self.intent_classifier = IntentClassifier()
        
        logger.info("‚úÖ Enhanced PostgreSQL Agent initialized (Simple Intent Logic)")
    
    # ========================================================================
    # üéØ CORE METHODS - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà IntentClassifier ‡∏î‡πâ‡∏ß‡∏¢ Simple Logic
    # ========================================================================
    
    async def process_enhanced_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üéØ Main processing method - ‡πÉ‡∏ä‡πâ Simple Intent Logic"""
        
        if tenant_id not in self.tenant_configs:
            return self._create_error_response("‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å tenant", tenant_id)
        
        start_time = datetime.now()
        config = self._get_config(tenant_id)
        
        try:
            # ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà IntentClassifier ‡∏î‡πâ‡∏ß‡∏¢ Simple Logic
            if self._needs_sql(question):
                return await self._process_sql_question(question, tenant_id, config, start_time)
            else:
                return self._process_conversational_question(question, tenant_id, config)
                
        except Exception as e:
            logger.error(f"‚ùå Processing failed for {tenant_id}: {e}")
            return self._create_error_response(str(e), tenant_id)
    
    def _needs_sql(self, question: str) -> bool:
        """üéØ Simple Intent Logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà IntentClassifier (400+ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‚Üí 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)"""
        sql_keywords = [
            # Thai keywords
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', '‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£', '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£', 
            '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
            '‡πÉ‡∏Ñ‡∏£', '‡πÑ‡∏´‡∏ô', '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö',
            
            # English keywords  
            'employee', 'project', 'how many', 'budget', 'salary', 
            'department', 'client', 'company', 'who', 'what', 'when',
            'work', 'assign', 'responsible',
            
            # Business keywords
            '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', 'banking', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 'hotel',
            '‡∏£‡∏∞‡∏ö‡∏ö', 'system', '‡πÅ‡∏≠‡∏õ', 'app', '‡πÄ‡∏ß‡πá‡∏ö', 'website'
        ]
        
        question_lower = question.lower()
        return any(keyword in question_lower for keyword in sql_keywords)
    
    async def _process_sql_question(self, question: str, tenant_id: str, config: TenantConfig, start_time: datetime) -> Dict[str, Any]:
        """üéØ Process questions that need SQL"""
        
        try:
            # Generate SQL
            sql_query = await self._generate_sql(question, tenant_id)
            
            # Execute SQL
            if self._is_valid_sql(sql_query):
                results = await self._execute_sql(sql_query, tenant_id)
                
                # Format response
                formatted_answer = self._format_response(results, question, tenant_id)
                
                processing_time = (datetime.now() - start_time).total_seconds()
                
                return {
                    "answer": formatted_answer,
                    "success": True,
                    "data_source_used": f"enhanced_sql_{config.model_name}",
                    "sql_query": sql_query,
                    "db_results_count": len(results) if results else 0,
                    "tenant_id": tenant_id,
                    "processing_time_seconds": processing_time,
                    "system_type": "enhanced_agent_simple_intent",
                    "intent_method": "simple_keyword_matching"  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà complex classification
                }
            else:
                return self._create_fallback_response(question, tenant_id, "SQL ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
                
        except Exception as e:
            return self._create_fallback_response(question, tenant_id, str(e))
    
    async def _generate_sql(self, question: str, tenant_id: str) -> str:
        """üéØ SQL generation with business context"""
        
        config = self._get_config(tenant_id)
        
        # Enhanced prompt based on business type
        business_context = self._get_business_context(tenant_id)
        
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

{business_context}

‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ employees: id, name, department, position, salary, hire_date, email
‚Ä¢ projects: id, name, client, budget, status, start_date, end_date, tech_stack  
‚Ä¢ employee_projects: employee_id, project_id, role, allocation

‡∏Å‡∏é SQL ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
1. ‡πÉ‡∏ä‡πâ COALESCE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NULL: COALESCE(p.name, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ')
2. ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏¥‡∏ô: TO_CHAR(salary, 'FM999,999,999') || ' ‡∏ö‡∏≤‡∏ó'
3. ‡πÉ‡∏ä‡πâ LEFT JOIN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assignment analysis
4. ‡πÉ‡∏ä‡πâ ILIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text search
5. LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß:"""
        
        try:
            ai_response = await self.ai_service.call_ollama_api(
                config, prompt, temperature=0.1
            )
            
            sql_query = self._extract_sql(ai_response)
            return sql_query
            
        except Exception as e:
            logger.error(f"SQL generation failed: {e}")
            return "SELECT 'SQL generation failed' as error"
    
    def _get_business_context(self, tenant_id: str) -> str:
        """üè¢ Get business context for each company"""
        
        business_contexts = {
            'company-a': """üè¢ ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏Ø - Enterprise Banking & E-commerce
üí∞ ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ö‡∏≤‡∏ó (THB)
üéØ ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, E-commerce, ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (1M-3M ‡∏ö‡∏≤‡∏ó)
üè¶ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û, ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå, Central Group""",

            'company-b': """üè® ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: ‡∏™‡∏≤‡∏Ç‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - Tourism & Hospitality  
üí∞ ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ö‡∏≤‡∏ó (THB)
üéØ ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (300k-800k ‡∏ö‡∏≤‡∏ó)
üåø ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏∏‡∏™‡∏¥‡∏ï, TAT, ‡∏™‡∏ß‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå, ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤""",

            'company-c': """üåç ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: International Office - Global Operations
üí∞ ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô: USD ‡πÅ‡∏•‡∏∞ Multi-currency
üéØ ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, Global platforms (1M-4M USD)
üåé ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: MegaCorp International, Global Finance Corp, Education Global"""
        }
        
        return business_contexts.get(tenant_id, business_contexts['company-a'])
    
    async def _execute_sql(self, sql_query: str, tenant_id: str) -> List[Dict[str, Any]]:
        """üéØ SQL execution with Decimal handling"""
        
        try:
            results = self.database_handler.execute_sql_query(tenant_id, sql_query)
            
            # Convert Decimal to float for JSON serialization
            processed_results = []
            for row in results:
                processed_row = {}
                for key, value in row.items():
                    if isinstance(value, Decimal):
                        processed_row[key] = float(value)
                    else:
                        processed_row[key] = value
                processed_results.append(processed_row)
            
            return processed_results
            
        except Exception as e:
            logger.error(f"SQL execution failed: {e}")
            return []
    
    def _format_response(self, results: List[Dict], question: str, tenant_id: str) -> str:
        """üé® Enhanced response formatting based on business context"""
        
        config = self._get_config(tenant_id)
        
        if not results:
            return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}"
        
        # Business-specific formatting
        business_emoji = self._get_business_emoji(tenant_id)
        currency = "USD" if tenant_id == 'company-c' else "‡∏ö‡∏≤‡∏ó"
        
        if config.language == 'th':
            response = f"{business_emoji} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}\n\n"
            response += f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}\n\n"
        else:
            response = f"{business_emoji} Search Results for {config.name}\n\n"
            response += f"Query: {question}\n\n"
        
        # Display results with business context
        for i, row in enumerate(results[:15], 1):
            response += f"{i:2d}. "
            for key, value in row.items():
                if key in ['salary', 'budget'] and isinstance(value, (int, float)):
                    response += f"{key}: {value:,.0f} {currency}, "
                elif key == 'allocation' and isinstance(value, float):
                    response += f"{key}: {value*100:.1f}%, "
                else:
                    response += f"{key}: {value}, "
            response = response.rstrip(', ') + "\n"
        
        # Add business insights
        insights = self._generate_business_insights(results, tenant_id)
        response += f"\nüí° {insights}"
        
        return response
    
    def _get_business_emoji(self, tenant_id: str) -> str:
        """üéØ Get business emoji for each company"""
        emojis = {
            'company-a': 'üè¶',  # Banking
            'company-b': 'üè®',  # Tourism  
            'company-c': 'üåç'   # International
        }
        return emojis.get(tenant_id, 'üíº')
    
    def _generate_business_insights(self, results: List[Dict], tenant_id: str) -> str:
        """üí° Generate business insights based on data"""
        
        if not results:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
        
        insights = []
        
        # Count and analyze
        total_count = len(results)
        insights.append(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {total_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # Analyze salary/budget if present
        financial_values = []
        for row in results:
            for key, value in row.items():
                if key in ['salary', 'budget'] and isinstance(value, (int, float)):
                    financial_values.append(value)
        
        if financial_values:
            avg_value = sum(financial_values) / len(financial_values)
            max_value = max(financial_values)
            currency = "USD" if tenant_id == 'company-c' else "‡∏ö‡∏≤‡∏ó"
            insights.append(f"‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_value:,.0f} {currency}, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {max_value:,.0f} {currency}")
        
        # Business-specific insights
        business_insights = {
            'company-a': "‡∏£‡∏∞‡∏î‡∏±‡∏ö Enterprise - ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà",
            'company-b': "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", 
            'company-c': "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥ - Global operations"
        }
        
        insights.append(business_insights.get(tenant_id, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"))
        
        return " | ".join(insights)
    
    def _create_fallback_response(self, question: str, tenant_id: str, error_reason: str) -> Dict[str, Any]:
        """üîÑ Business-specific fallback response"""
        
        config = self._get_config(tenant_id)
        business_emoji = self._get_business_emoji(tenant_id)
        
        fallback_responses = {
            'company-a': f"""{business_emoji} {config.name} - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô:
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (CRM, Mobile Banking)
‚Ä¢ E-commerce ‡πÅ‡∏•‡∏∞ AI Chatbot
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏´‡∏•‡∏≤‡∏¢‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó

üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö: ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì""",

            'company-b': f"""{business_emoji} {config.name} - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô:
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
‚Ä¢ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞ POS
‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤

üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö: ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠""",

            'company-c': f"""{business_emoji} {config.name} - International Operations

Question: {question}

We specialize in:
‚Ä¢ Global software platforms
‚Ä¢ Multi-currency systems  
‚Ä¢ Cross-border solutions
‚Ä¢ International compliance

üí° Try asking about: international projects, USD budgets, global clients"""
        }
        
        answer = fallback_responses.get(tenant_id, fallback_responses['company-a'])
        
        return {
            "answer": answer,
            "success": True,
            "data_source_used": f"enhanced_fallback_{config.model_name}",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_type": "enhanced_fallback_simple_intent",
            "fallback_reason": error_reason,
            "intent_method": "simple_keyword_matching"
        }
    
    def _is_valid_sql(self, sql: str) -> bool:
        """üîí SQL validation for security"""
        
        if not sql or not sql.strip():
            return False
        
        sql_upper = sql.upper()
        
        # Check for dangerous keywords
        dangerous_keywords = ['DROP', 'DELETE', 'UPDATE', 'INSERT', 'ALTER', 'CREATE', 'TRUNCATE']
        for keyword in dangerous_keywords:
            if keyword in sql_upper:
                logger.warning(f"üö® Dangerous SQL keyword detected: {keyword}")
                return False
        
        # Must be a SELECT statement
        if not sql_upper.strip().startswith('SELECT'):
            return False
        
        return True
    
    def _get_config(self, tenant_id: str) -> TenantConfig:
        """üìù Get tenant configuration"""
        return self.tenant_configs[tenant_id]
    
    def _extract_sql(self, ai_response: str) -> str:
        """üîç Extract SQL from AI response"""
        
        # Look for SQL in code blocks
        sql_patterns = [
            r'```sql\s*(.*?)\s*```',
            r'```\s*(SELECT.*?)\s*```',
            r'(SELECT.*?);?\s*$'
        ]
        
        for pattern in sql_patterns:
            match = re.search(pattern, ai_response, re.DOTALL | re.IGNORECASE)
            if match:
                sql = match.group(1).strip()
                if sql.endswith(';'):
                    sql = sql[:-1]
                return sql
        
        # If no pattern found, look for SELECT statement
        lines = ai_response.split('\n')
        for line in lines:
            if line.strip().upper().startswith('SELECT'):
                return line.strip()
        
        return "SELECT 'No valid SQL found' as message"
    
    def _process_conversational_question(self, question: str, tenant_id: str, config: TenantConfig) -> Dict[str, Any]:
        """üí¨ Process conversational questions"""
        
        business_emoji = self._get_business_emoji(tenant_id)
        
        greetings = ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', '‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£']
        if any(word in question.lower() for word in greetings):
            
            greeting_responses = {
                'company-a': f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

{business_emoji} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ú‡∏°:
‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
‚Ä¢ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ E-commerce  
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì

üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
‚Ä¢ "‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å"
‚Ä¢ "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£"
‚Ä¢ "‡πÉ‡∏Ñ‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ CRM"

‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?""",

                'company-b': f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÄ‡∏à‡πâ‡∏≤! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

{business_emoji} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ú‡∏°:
‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
‚Ä¢ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚Ä¢ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß

üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
‚Ä¢ "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
‚Ä¢ "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤"

‡∏ô‡πâ‡∏≥‡πÉ‡∏à‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ - ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?""",

                'company-c': f"""Hello! I'm the AI Assistant for {config.name}

{business_emoji} My capabilities:
‚Ä¢ Analyze international software projects
‚Ä¢ Answer questions about global operations
‚Ä¢ Multi-currency financial analysis
‚Ä¢ Cross-border business intelligence

üéØ Example questions:
‚Ä¢ "Which international projects exist"
‚Ä¢ "What's the USD budget breakdown"
‚Ä¢ "How many global clients do we have"

How can I help you today?"""
            }
            
            answer = greeting_responses.get(tenant_id, greeting_responses['company-a'])
        else:
            answer = self._create_fallback_response(question, tenant_id, "conversational")["answer"]
        
        return {
            "answer": answer,
            "success": True,
            "data_source_used": f"enhanced_conversational_{config.model_name}",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_type": "enhanced_conversational_simple_intent",
            "intent_method": "simple_keyword_matching"
        }
    
    def _create_error_response(self, error_message: str, tenant_id: str) -> Dict[str, Any]:
        """‚ùå Create error response"""
        
        return {
            "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}",
            "success": False,
            "data_source_used": "enhanced_error",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_type": "enhanced_error",
            "error": error_message,
            "intent_method": "simple_keyword_matching"
        }
    
    # ========================================================================
    # üîÑ COMPATIBILITY METHODS (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    # ========================================================================
    
    async def process_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """Compatibility method"""
        return await self.process_enhanced_question(question, tenant_id)
    
    async def process_enhanced_question_streaming(self, question: str, tenant_id: str):
        """Simple streaming implementation"""
        
        yield {
            "type": "status", 
            "message": "üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (Simple Intent Logic)...",
            "step": "processing"
        }
        
        # Process question
        result = await self.process_enhanced_question(question, tenant_id)
        
        # Yield result in chunks
        answer = result["answer"]
        chunk_size = 100
        
        for i in range(0, len(answer), chunk_size):
            chunk = answer[i:i+chunk_size]
            yield {
                "type": "answer_chunk",
                "content": chunk
            }
            
        yield {
            "type": "answer_complete",
            "sql_query": result.get("sql_query"),
            "db_results_count": result.get("db_results_count", 0),
            "processing_time_seconds": result.get("processing_time_seconds", 0),
            "tenant_id": tenant_id,
            "intent_method": "simple_keyword_matching"
        }