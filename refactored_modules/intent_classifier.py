import re
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class IntentClassifier:
    """üéØ Enhanced intent classifier with better SQL detection"""
    
    def __init__(self):
        # Pure conversational patterns (high confidence)
        self.pure_conversational_patterns = {
            'greeting': [
                r'^(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi|hey)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|employee|project))',
                r'^(good morning|good afternoon|good evening)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))'
            ],
            'thanks': [
                r'^(‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì|thank you|thanks|thx)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))',
                r'^(appreciate|grateful)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))'
            ],
            'help_general': [
                r'^(‡∏ä‡πà‡∏ß‡∏¢.*‡πÑ‡∏î‡πâ.*‡∏≠‡∏∞‡πÑ‡∏£|what can you do|how.*help)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡πÅ‡∏ú‡∏ô‡∏Å))',
                r'^(‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠|need help)(?!\s+.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))'
            ]
        }
        
        # Strong SQL indicator patterns (should trigger SQL)
        self.strong_sql_patterns = {
            'employee_queries': [
                r'(‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô.*(?:‡∏Ñ‡∏ô|‡πÉ‡∏Ñ‡∏£|‡πÑ‡∏´‡∏ô|‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))',
                r'(employee.*(?:who|work|project|responsible))',
                r'(‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô.*(?:‡∏ó‡∏≥|‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£))',
                r'(‡πÉ‡∏Ñ‡∏£.*(?:‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£|‡∏î‡∏π‡πÅ‡∏•).*(?:‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡∏á‡∏≤‡∏ô|project))'
            ],
            'project_queries': [
                r'(‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ.*(?:‡∏≠‡∏∞‡πÑ‡∏£|‡πÑ‡∏´‡∏ô|‡∏ö‡πâ‡∏≤‡∏á|‡∏°‡∏µ|‡∏á‡∏≤‡∏ô))',
                r'(project.*(?:what|which|list|work|responsible))',
                r'(‡∏á‡∏≤‡∏ô.*(?:‡∏≠‡∏∞‡πÑ‡∏£|‡πÑ‡∏´‡∏ô|‡∏ö‡πâ‡∏≤‡∏á|‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö))',
                r'(‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö.*(?:‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡∏á‡∏≤‡∏ô|project))'
            ],
            'department_queries': [
                r'(‡πÅ‡∏ú‡∏ô‡∏Å.*(?:‡πÑ‡∏´‡∏ô|‡∏≠‡∏∞‡πÑ‡∏£|‡∏°‡∏µ|‡∏Å‡∏µ‡πà))',
                r'(department.*(?:what|which|how many))',
                r'(‡∏ù‡πà‡∏≤‡∏¢.*(?:‡πÑ‡∏´‡∏ô|‡∏≠‡∏∞‡πÑ‡∏£|‡∏°‡∏µ))'
            ],
            'counting_queries': [
                r'(‡∏Å‡∏µ‡πà.*(?:‡∏Ñ‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡πÅ‡∏ú‡∏ô‡∏Å))',
                r'(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô.*(?:‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡πÅ‡∏ú‡∏ô‡∏Å))',
                r'(how many.*(?:employee|project|department))',
                r'(count.*(?:employee|project))'
            ],
            'assignment_queries': [  # üî• NEW: ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö/assignment patterns
                r'(‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô.*(?:‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£))',
                r'(each.*(?:responsible|work|manage))',
                r'(‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö.*(?:‡∏≠‡∏∞‡πÑ‡∏£|‡πÑ‡∏´‡∏ô|‡∏ö‡πâ‡∏≤‡∏á))',
                r'(responsible.*(?:what|which|for))',
                r'(assignment|assigned|allocate)'
            ]
        }
        
        # Business entity indicators
        self.business_entities = [
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'employee', 'staff', '‡∏Ñ‡∏ô', 'people',
            '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', 'project', '‡∏á‡∏≤‡∏ô', 'work', 'task',
            '‡πÅ‡∏ú‡∏ô‡∏Å', 'department', '‡∏ù‡πà‡∏≤‡∏¢', 'division', 'team',
            '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'salary', 'pay', 'wage',
            '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', 'budget', 'cost', 'expense',
            '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', 'client', 'customer',
            'siamtech', '‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ'
        ]
    
    def classify_intent(self, question: str) -> Dict[str, Any]:
        """üéØ Enhanced intent classification with better SQL detection"""
        
        if not question or len(question.strip()) == 0:
            return self._create_response('conversation', 0.9, 'Empty question')
        
        question_lower = question.lower().strip()
        
        # 1. Check for PURE conversational patterns first (strict matching)
        pure_conv_result = self._check_pure_conversational_patterns(question_lower)
        if pure_conv_result['confidence'] > 0.8:
            return pure_conv_result
        
        # 2. Check for STRONG SQL patterns (should override conversational)
        strong_sql_result = self._check_strong_sql_patterns(question_lower)
        if strong_sql_result['confidence'] > 0.7:
            return strong_sql_result
        
        # 3. Check for business entities (moderate confidence SQL)
        entity_result = self._check_business_entities(question_lower)
        if entity_result['confidence'] > 0.5:
            return entity_result
        
        # 4. Default: if contains any work-related terms, try SQL
        if self._contains_work_terms(question_lower):
            return self._create_response(
                'business_query',
                0.6,
                'Contains work-related terms, trying SQL'
            )
        
        # 5. Final fallback to conversation
        return self._create_response(
            'conversation',
            0.5,
            'No clear business intent detected'
        )
    
    def _check_pure_conversational_patterns(self, question: str) -> Dict[str, Any]:
        """üí¨ Check for PURE conversational patterns (no business context)"""
        
        for category, patterns in self.pure_conversational_patterns.items():
            for pattern in patterns:
                if re.search(pattern, question, re.IGNORECASE):
                    return self._create_response(
                        'conversation',
                        0.95,
                        f'Pure conversational pattern: {category}'
                    )
        
        return self._create_response('unknown', 0.0, 'No pure conversational patterns')
    
    def _check_strong_sql_patterns(self, question: str) -> Dict[str, Any]:
        """üóÑÔ∏è Check for STRONG SQL indicator patterns"""
        
        confidence = 0.0
        matched_categories = []
        
        for category, patterns in self.strong_sql_patterns.items():
            for pattern in patterns:
                if re.search(pattern, question, re.IGNORECASE):
                    confidence += 0.3
                    matched_categories.append(category)
                    
                    # üî• Special boost for assignment queries
                    if category == 'assignment_queries':
                        confidence += 0.2
        
        if confidence > 0:
            unique_categories = list(dict.fromkeys(matched_categories))
            return self._create_response(
                'business_query',
                min(0.95, confidence),
                f'Strong SQL patterns: {unique_categories}'
            )
        
        return self._create_response('unknown', 0.0, 'No strong SQL patterns')
    
    def _check_business_entities(self, question: str) -> Dict[str, Any]:
        """üè¢ Check for business entity mentions"""
        
        entity_count = 0
        found_entities = []
        
        for entity in self.business_entities:
            if entity.lower() in question:
                entity_count += 1
                found_entities.append(entity)
        
        if entity_count >= 2:  # At least 2 business entities
            return self._create_response(
                'business_query',
                0.8,
                f'Multiple business entities: {found_entities[:3]}'
            )
        elif entity_count >= 1:  # At least 1 business entity
            return self._create_response(
                'business_query',
                0.6,
                f'Business entity detected: {found_entities[0]}'
            )
        
        return self._create_response('unknown', 0.0, 'No business entities')
    
    def _contains_work_terms(self, question: str) -> bool:
        """üîç Check if contains any work-related terms"""
        work_terms = [
            '‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö', 'responsible', 'assignment', 'assigned',
            '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', 'work', 'working', 'job',
            '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', 'manage', 'management',
            '‡∏î‡∏π‡πÅ‡∏•', 'handle', 'take care',
            'siamtech', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'company'
        ]
        
        return any(term in question for term in work_terms)
    
    def _create_response(self, intent: str, confidence: float, reasoning: str) -> Dict[str, Any]:
        """üìù Create standardized response"""
        
        should_use_sql = intent in ['business_query', 'data_query']
        
        return {
            'intent': intent,
            'confidence': confidence,
            'should_use_sql': should_use_sql,
            'reasoning': reasoning,
            'classifier_version': 'enhanced_v2.0'
        }

# üß™ Test the improved classifier
def test_improved_classifier():
    """Test the improved intent classifier"""
    classifier = IntentClassifier()
    
    test_cases = [
        # Should be SQL (business queries)
        ("‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô siamtech ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", True),
        ("‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å", True),
        ("‡πÉ‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Mobile App", True),
        ("‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", True),
        
        # Should be conversational
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", False),
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö", False),
        ("‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£", False),
        ("‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", False),
        
        # Edge cases - should be SQL
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô", True),  # Mixed but has business context
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏´‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", True)  # Mixed but has business context
    ]
    
    print("üß™ Testing Improved Intent Classifier")
    print("=" * 50)
    
    for question, expected_sql in test_cases:
        result = classifier.classify_intent(question)
        actual_sql = result['should_use_sql']
        status = "‚úÖ" if actual_sql == expected_sql else "‚ùå"
        
        print(f"{status} {question}")
        print(f"   Expected SQL: {expected_sql}, Got: {actual_sql}")
        print(f"   Intent: {result['intent']}, Confidence: {result['confidence']:.2f}")
        print(f"   Reasoning: {result['reasoning']}")
        print()

if __name__ == "__main__":
    test_improved_classifier()