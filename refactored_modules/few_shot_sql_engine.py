import re
import logging
from typing import Dict, List, Tuple, Any, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class SQLExample:
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á SQL ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"""
    question: str
    sql: str
    explanation: str
    category: str
    difficulty: str = "medium"
    confidence: float = 0.9

class FewShotSQLEngine:
    """üß† ‡∏£‡∏∞‡∏ö‡∏ö Few-Shot Learning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL Generation"""
    
    def __init__(self):
        self.sql_examples = self._load_curated_examples()
        self.question_patterns = self._load_question_patterns()
        logger.info("‚úÖ Few-Shot SQL Engine initialized")
    
    def _load_curated_examples(self) -> Dict[str, List[SQLExample]]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á SQL ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏™‡∏£‡∏£‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"""
        return {
            # üéØ Assignment Queries - ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            'assignment_queries': [
                SQLExample(
                    question="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô siamtech ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
                    sql="""SELECT 
    e.name as employee_name,
    e.position,
    e.department,
    COALESCE(p.name, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ') as project_name,
    COALESCE(p.client, '-') as client,
    COALESCE(ep.role, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó') as project_role,
    CASE 
        WHEN ep.allocation IS NOT NULL 
        THEN ROUND(ep.allocation * 100, 1) || '%'
        ELSE '0%' 
    END as time_allocation
FROM employees e
LEFT JOIN employee_projects ep ON e.id = ep.employee_id
LEFT JOIN projects p ON ep.project_id = p.id
ORDER BY e.name, p.name
LIMIT 20;""",
                    explanation="‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ, ‡πÉ‡∏ä‡πâ COALESCE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ NULL",
                    category="assignment_queries",
                    confidence=0.95
                ),
                
                SQLExample(
                    question="‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Mobile Banking App",
                    sql="""SELECT 
    p.name as project_name,
    p.client,
    e.name as employee_name,
    e.position,
    ep.role as project_role,
    ROUND(ep.allocation * 100, 1) || '%' as time_allocation,
    p.status as project_status
FROM projects p
JOIN employee_projects ep ON p.id = ep.project_id
JOIN employees e ON ep.employee_id = e.id
WHERE p.name ILIKE '%Mobile Banking%'
ORDER BY ep.allocation DESC;""",
                    explanation="‡πÉ‡∏ä‡πâ INNER JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô, ‡πÉ‡∏ä‡πâ ILIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡πá‡∏Å",
                    category="assignment_queries",
                    confidence=0.90
                )
            ],
            
            # üìä Department Analysis - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏Å
            'department_analysis': [
                SQLExample(
                    question="‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å",
                    sql="""SELECT 
    department,
    COUNT(*) as employee_count,
    ROUND(AVG(salary), 0) as avg_salary,
    MIN(salary) as min_salary,
    MAX(salary) as max_salary,
    TO_CHAR(AVG(salary), 'FM999,999,999') || ' ‡∏ö‡∏≤‡∏ó' as formatted_avg_salary
FROM employees 
GROUP BY department 
ORDER BY employee_count DESC;""",
                    explanation="‡πÉ‡∏ä‡πâ GROUP BY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å, ‡πÉ‡∏ä‡πâ COUNT, AVG, MIN, MAX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥",
                    category="department_analysis",
                    confidence=0.95
                )
            ],
            
            # üí∞ Project & Budget Analysis - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            'project_analysis': [
                SQLExample(
                    question="‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                    sql="""SELECT 
    p.name as project_name,
    p.client,
    TO_CHAR(p.budget, 'FM999,999,999') || ' ‡∏ö‡∏≤‡∏ó' as formatted_budget,
    p.status,
    p.start_date,
    p.end_date,
    COUNT(ep.employee_id) as team_size
FROM projects p
LEFT JOIN employee_projects ep ON p.id = ep.project_id
GROUP BY p.id, p.name, p.client, p.budget, p.status, p.start_date, p.end_date
ORDER BY p.budget DESC NULLS LAST
LIMIT 10;""",
                    explanation="‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°, ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô, ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
                    category="project_analysis",
                    confidence=0.90
                )
            ]
        }
    
    def _load_question_patterns(self) -> Dict[str, List[str]]:
        """‡πÇ‡∏´‡∏•‡∏î patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        return {
            'assignment_queries': [
                r'(‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô.*‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô.*(?:‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£))',
                r'(siamtech.*‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô.*(?:‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ))',
                r'(‡πÉ‡∏Ñ‡∏£.*(?:‡∏ó‡∏≥‡∏á‡∏≤‡∏ô|‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö).*(?:‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡∏á‡∏≤‡∏ô))',
                r'(‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö.*(?:‡∏≠‡∏∞‡πÑ‡∏£|‡πÑ‡∏´‡∏ô|‡∏ö‡πâ‡∏≤‡∏á))',
                r'(‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô.*(?:‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö|‡∏ó‡∏≥|‡∏á‡∏≤‡∏ô))'
            ],
            'department_analysis': [
                r'((?:‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô|‡∏à‡∏≥‡∏ô‡∏ß‡∏ô).*‡πÅ‡∏ú‡∏ô‡∏Å)',
                r'(‡πÅ‡∏ú‡∏ô‡∏Å.*(?:‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô|‡∏à‡∏≥‡∏ô‡∏ß‡∏ô|‡∏°‡∏µ))',
                r'(‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô.*(?:‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô|‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô))'
            ],
            'project_analysis': [
                r'(‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ.*(?:‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì|‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î|‡πÉ‡∏´‡∏ç‡πà))',
                r'(‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì.*(?:‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î|‡∏°‡∏≤‡∏Å))',
                r'(‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤.*(?:‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ|‡∏Å‡∏µ‡πà))'
            ]
        }
    
    def find_relevant_examples(self, question: str, max_examples: int = 2) -> List[SQLExample]:
        """üéØ ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        question_lower = question.lower()
        scored_examples = []
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        for category, examples in self.sql_examples.items():
            category_patterns = self.question_patterns.get(category, [])
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö category ‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
            category_score = 0
            for pattern in category_patterns:
                if re.search(pattern, question_lower, re.IGNORECASE):
                    category_score += 1
            
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö category ‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            if category_score > 0:
                for example in examples:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢
                    similarity_score = self._calculate_similarity(question, example.question)
                    total_score = (category_score * 0.4) + (similarity_score * 0.4) + (example.confidence * 0.2)
                    
                    scored_examples.append((total_score, example))
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        scored_examples.sort(key=lambda x: x[0], reverse=True)
        return [example for _, example in scored_examples[:max_examples]]
    
    def _calculate_similarity(self, question1: str, question2: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        words1 = set(question1.lower().split())
        words2 = set(question2.lower().split())
        
        # Jaccard similarity
        intersection = len(words1 & words2)
        union = len(words1 | words2)
        
        return intersection / union if union > 0 else 0.0
    
    def generate_few_shot_prompt(self, question: str, schema_info: Dict, config) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Few-Shot Prompt ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        
        # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        relevant_examples = self.find_relevant_examples(question, max_examples=2)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á examples section
        examples_section = self._format_examples_section(relevant_examples)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á schema section ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
        schema_section = self._format_schema_section(schema_info)
        
        if config.language == 'th':
            prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
{schema_section}

üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
{examples_section}

üîß ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
1. ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)
2. ‡πÉ‡∏ä‡πâ INNER JOIN ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
3. ‡πÉ‡∏ä‡πâ COALESCE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà NULL ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
4. ‡πÉ‡∏ä‡πâ TO_CHAR ‡∏´‡∏£‡∏∑‡∏≠ ROUND ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
5. ‡πÉ‡∏™‡πà ORDER BY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
6. ‡πÉ‡∏™‡πà LIMIT ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
7. ‡πÉ‡∏ä‡πâ ILIKE ‡πÅ‡∏ó‡∏ô LIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô PostgreSQL

‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SQL query ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
- ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ (employee_name, project_name)

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

PostgreSQL Query:
```sql"""
        
        else:  # English
            prompt = f"""You are a PostgreSQL Expert for {config.name}

üìã Database Schema:
{schema_section}

üéØ Learn from these examples:
{examples_section}

üîß Key Principles:
1. Use LEFT JOIN to show all records
2. Use INNER JOIN for required relationships
3. Use COALESCE for NULL handling
4. Use meaningful column names
5. Include ORDER BY and LIMIT

Question: {question}

PostgreSQL Query:
```sql"""
        
        return prompt
    
    def _format_examples_section(self, examples: List[SQLExample]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö section ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        if not examples:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"
        
        formatted = ""
        for i, example in enumerate(examples, 1):
            formatted += f"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà {i}:
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {example.question}
```sql
{example.sql.strip()}
```
‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£: {example.explanation}
"""
        return formatted
    
    def _format_schema_section(self, schema_info: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö schema ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö"""
        tables = schema_info.get('tables', {})
        formatted = ""
        
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        essential_tables = ['employees', 'projects', 'employee_projects']
        
        for table_name in essential_tables:
            if table_name in tables:
                table_info = tables[table_name]
                columns = table_info.get('columns', [])
                
                # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                main_columns = []
                for col in columns[:8]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 8 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                    col_name = col.split(' ')[0]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠
                    main_columns.append(col_name)
                
                formatted += f"‚Ä¢ {table_name}: {', '.join(main_columns)}\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
        formatted += "\nüîó ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:\n"
        formatted += "‚Ä¢ employees ‚Üê employee_projects ‚Üí projects\n"
        formatted += "‚Ä¢ employee_projects ‡∏°‡∏µ role ‡πÅ‡∏•‡∏∞ allocation\n"
        
        return formatted

class EnhancedFewShotAgent:
    """üöÄ Agent ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Few-Shot Learning"""
    
    def __init__(self, original_agent):
        self.original_agent = original_agent
        self.few_shot_engine = FewShotSQLEngine()
        logger.info("‚úÖ Enhanced Few-Shot Agent initialized")
    
    async def generate_sql_with_few_shot(self, question: str, tenant_id: str) -> Tuple[str, Dict[str, Any]]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏î‡πâ‡∏ß‡∏¢ Few-Shot Learning"""
        
        config = self.original_agent.tenant_configs[tenant_id]
        schema_info = self.original_agent.schema_service.get_schema_info(tenant_id)
        
        try:
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Few-Shot Prompt
            few_shot_prompt = self.few_shot_engine.generate_few_shot_prompt(
                question, schema_info, config
            )
            
            logger.info(f"üéØ Generated few-shot prompt with {len(self.few_shot_engine.find_relevant_examples(question))} examples")
            
            # 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI
            ai_response = await self.original_agent.ai_service.call_ollama_api(
                config, few_shot_prompt, temperature=0.1  # ‡πÉ‡∏ä‡πâ temp ‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            )
            
            # 3. ‡πÅ‡∏¢‡∏Å SQL
            sql_query = self._extract_sql_from_response(ai_response)
            
            # 4. Validate
            if self._validate_sql_basic(sql_query):
                return sql_query, {
                    'method': 'few_shot_learning',
                    'confidence': 'high',
                    'examples_used': len(self.few_shot_engine.find_relevant_examples(question)),
                    'temperature': 0.1
                }
            else:
                # Fallback
                return await self._fallback_to_original(question, tenant_id)
                
        except Exception as e:
            logger.error(f"Few-shot generation failed: {e}")
            return await self._fallback_to_original(question, tenant_id)
    
    def _extract_sql_from_response(self, ai_response: str) -> str:
        """‡πÅ‡∏¢‡∏Å SQL ‡∏à‡∏≤‡∏Å AI response"""
        # ‡∏•‡∏ö markdown ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        cleaned = ai_response.strip()
        
        # ‡∏´‡∏≤ SQL ‡πÉ‡∏ô code block
        sql_patterns = [
            r'```sql\s*(.*?)\s*```',
            r'```\s*(SELECT.*?;?)\s*```',
            r'(SELECT.*?;)',
        ]
        
        for pattern in sql_patterns:
            match = re.search(pattern, cleaned, re.DOTALL | re.IGNORECASE)
            if match:
                sql = match.group(1).strip()
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
                sql = ' '.join(sql.split())  # ‡∏•‡∏ö whitespace ‡πÄ‡∏Å‡∏¥‡∏ô
                if not sql.endswith(';'):
                    sql += ';'
                
                return sql
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SELECT
        lines = cleaned.split('\n')
        sql_lines = []
        
        for line in lines:
            line = line.strip()
            if line.upper().startswith('SELECT') or sql_lines:
                sql_lines.append(line)
                if line.endswith(';'):
                    break
        
        if sql_lines:
            sql = ' '.join(sql_lines)
            return sql if sql.endswith(';') else sql + ';'
        
        return "SELECT 'Few-shot SQL extraction failed' as error;"
    
    def _validate_sql_basic(self, sql: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        sql_upper = sql.upper().strip()
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if not sql_upper.startswith('SELECT'):
            return False
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
        dangerous = ['DROP', 'DELETE', 'UPDATE', 'INSERT', 'ALTER', 'CREATE', 'TRUNCATE']
        if any(keyword in sql_upper for keyword in dangerous):
            return False
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ FROM
        if 'FROM' not in sql_upper:
            return False
        
        return True
    
    async def _fallback_to_original(self, question: str, tenant_id: str) -> Tuple[str, Dict[str, Any]]:
        """Fallback ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°"""
        logger.info("üîÑ Falling back to original SQL generation")
        return await self.original_agent.original_generate_enhanced_sql(question, tenant_id)

# Test function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async def test_few_shot_engine():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Few-Shot"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock objects
    class MockConfig:
        language = 'th'
        name = 'SiamTech Bangkok HQ'
    
    mock_schema = {
        'tables': {
            'employees': {'columns': ['id', 'name', 'position', 'department', 'salary']},
            'projects': {'columns': ['id', 'name', 'client', 'budget', 'status']},
            'employee_projects': {'columns': ['employee_id', 'project_id', 'role', 'allocation']}
        }
    }
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    engine = FewShotSQLEngine()
    config = MockConfig()
    
    test_question = "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô siamtech ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
    
    print("üß™ Testing Few-Shot SQL Engine")
    print("=" * 50)
    print(f"Question: {test_question}")
    
    # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    examples = engine.find_relevant_examples(test_question)
    print(f"üéØ Found {len(examples)} relevant examples")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
    prompt = engine.generate_few_shot_prompt(test_question, mock_schema, config)
    print(f"üìù Prompt generated successfully: {len(prompt)} characters")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_few_shot_engine())