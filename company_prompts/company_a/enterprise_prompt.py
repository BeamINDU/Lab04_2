import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from company_prompts.base_prompt import BaseCompanyPrompt
from typing import Dict, Any, List
from datetime import datetime

# Import shared logger
from shared_components.logging_config import logger

class EnterprisePrompt(BaseCompanyPrompt):
    """üè¶ Simple Enterprise Banking Prompt"""
    
    def __init__(self, company_config: Dict[str, Any]):
        super().__init__(company_config)
        logger.info(f"‚úÖ Simple EnterprisePrompt initialized for {self.company_name}")
    
    # ‚úÖ MAIN ENTRY POINT (Required by PromptManager)
    async def process_question(self, question: str) -> Dict[str, Any]:
        """üéØ Simple main processing method"""
        
        try:
            self.usage_stats['queries_processed'] += 1
            self.usage_stats['last_used'] = datetime.now().isoformat()
            
            # Simple logic: detect if it's a greeting or data query
            if self._is_greeting(question):
                return self._create_greeting_response()
            elif self._is_data_query(question):
                return self._create_data_response(question)
            else:
                return self._create_general_response(question)
                
        except Exception as e:
            logger.error(f"‚ùå Enterprise processing failed: {e}")
            return {
                'success': False,
                'answer': f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}",
                'error': str(e),
                'tenant_id': self.company_id,
                'data_source_used': 'enterprise_error'
            }
    
    # ‚úÖ ABSTRACT METHODS (Required by BaseCompanyPrompt)
    def generate_sql_prompt(self, question: str, schema_info: Dict[str, Any]) -> str:
        """üéØ Simple SQL prompt generation"""
        
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö Enterprise Banking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.company_name}

üè¢ ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: 800,000 - 3,000,000+ ‡∏ö‡∏≤‡∏ó
üéØ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏ç‡πà, E-commerce

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ employees: id, name, department, position, salary, hire_date, email
‚Ä¢ projects: id, name, client, budget, status, start_date, end_date, tech_stack
‚Ä¢ employee_projects: employee_id, project_id, role, allocation

üîß ‡∏Å‡∏é SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enterprise:
1. ‡πÉ‡∏ä‡πâ ILIKE '%keyword%' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡πá‡∏Å)
2. ‡πÉ‡∏ä‡πâ LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠
3. ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ COALESCE ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
4. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query:"""

        return prompt
    
    def format_response(self, question: str, results: List[Dict], metadata: Dict) -> str:
        """üé® Simple response formatting"""
        
        if not results:
            return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}"
        
        response = f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö Enterprise - {self.company_name}\n\n"
        
        # Display results (simple format)
        for i, row in enumerate(results[:10], 1):
            response += f"{i}. "
            for key, value in row.items():
                if 'salary' in key or 'budget' in key:
                    response += f"{key}: {value:,.0f} ‡∏ö‡∏≤‡∏ó, "
                else:
                    response += f"{key}: {value}, "
            response = response.rstrip(', ') + "\n"
        
        response += f"\nüí° ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Enterprise"
        
        return response
    
    def _load_business_rules(self) -> Dict[str, Any]:
        """üìã Simple business rules"""
        return {
            'salary_ranges': {'junior': '35k-50k', 'senior': '60k-100k', 'lead': '80k-150k'},
            'project_budgets': {'small': '<1M', 'medium': '1M-2.5M', 'large': '>2.5M'},
            'focus': 'banking_and_enterprise_systems'
        }
    
    def _load_schema_mappings(self) -> Dict[str, Any]:
        """üóÑÔ∏è Simple schema mappings"""
        return {
            'main_tables': ['employees', 'projects', 'employee_projects'],
            'key_fields': ['salary', 'budget', 'status']
        }
    
    # ‚úÖ SIMPLE HELPER METHODS (‡πÄ‡∏û‡∏µ‡∏¢‡∏á 3 ‡∏ï‡∏±‡∏ß)
    def _is_greeting(self, question: str) -> bool:
        """Check if question is a greeting"""
        greetings = ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', '‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£']
        return any(word in question.lower() for word in greetings)
    
    def _is_data_query(self, question: str) -> bool:
        """Check if question asks for data"""
        data_words = ['‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', 'project', 'employee', '‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£']
        return any(word in question.lower() for word in data_words)
    
    def _create_greeting_response(self) -> Dict[str, Any]:
        """Simple greeting response"""
        answer = f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.company_name}

üè¶ ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô Enterprise Software Development:
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ E-commerce ‡πÅ‡∏•‡∏∞ CRM ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏´‡∏•‡∏≤‡∏¢‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó

üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
‚Ä¢ "‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å"
‚Ä¢ "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
‚Ä¢ "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"

‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"""
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'enterprise_greeting_{self.model}',
            'tenant_id': self.company_id
        }
    
    def _create_data_response(self, question: str) -> Dict[str, Any]:
        """Simple data response with mock data"""
        
        # Mock data based on question keywords
        if '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' in question or 'banking' in question.lower():
            answer = """üìä ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:

1. ‡∏£‡∏∞‡∏ö‡∏ö CRM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   ‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 3,000,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

2. Mobile Banking App
   ‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 2,500,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

üí° ‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥"""

        elif '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' in question or 'employee' in question.lower():
            answer = """üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô Enterprise:

1. ‡πÅ‡∏ú‡∏ô‡∏Å IT: 10 ‡∏Ñ‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 75,000 ‡∏ö‡∏≤‡∏ó)
2. ‡πÅ‡∏ú‡∏ô‡∏Å Sales: 3 ‡∏Ñ‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 65,000 ‡∏ö‡∏≤‡∏ó)
3. ‡πÅ‡∏ú‡∏ô‡∏Å Management: 2 ‡∏Ñ‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 120,000 ‡∏ö‡∏≤‡∏ó)

üí° ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö Senior ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á"""

        elif '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' in question or 'project' in question.lower():
            answer = """üìä ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Enterprise ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:

1. ‡∏£‡∏∞‡∏ö‡∏ö CRM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (3M ‡∏ö‡∏≤‡∏ó)
2. AI Chatbot E-commerce (1.2M ‡∏ö‡∏≤‡∏ó)
3. Mobile Banking App (2.5M ‡∏ö‡∏≤‡∏ó)
4. ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå E-learning (800K ‡∏ö‡∏≤‡∏ó)

üí° ‡∏£‡∏ß‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ 7.5 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"""

        else:
            answer = f"""üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enterprise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {question}

‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {self.company_name}:
‚Ä¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞ E-commerce
‚Ä¢ ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô 15+ ‡∏Ñ‡∏ô ‡∏£‡∏∞‡∏î‡∏±‡∏ö Senior

üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"""
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'enterprise_data_{self.model}',
            'tenant_id': self.company_id
        }
    
    def _create_general_response(self, question: str) -> Dict[str, Any]:
        """Simple general response"""
        answer = f"""üè¶ Enterprise Analysis System

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {self.company_name}:
‚Ä¢ ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: React, Node.js, AWS
‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏ç‡πà

üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"""
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'enterprise_general_{self.model}',
            'tenant_id': self.company_id
        }