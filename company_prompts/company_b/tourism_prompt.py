# company_prompts/company_b/tourism_prompt.py
# üè® Complete Tourism & Hospitality Prompt System

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from company_prompts.base_prompt import BaseCompanyPrompt
from typing import Dict, Any, List, Set
from datetime import datetime
import re

# Import shared logger
from shared_components.logging_config import logger

# Import existing components if available
try:
    from refactored_modules.business_logic_mapper import BusinessLogicMapper
    from refactored_modules.schema_discovery import SchemaDiscoveryService
    EXISTING_COMPONENTS_AVAILABLE = True
except ImportError:
    EXISTING_COMPONENTS_AVAILABLE = False

class TourismPrompt(BaseCompanyPrompt):
    """üè® Tourism & Hospitality Prompt System for Northern Thailand"""
    
    def __init__(self, company_config: Dict[str, Any]):
        super().__init__(company_config)
        
        # Tourism-specific components
        self.regional_rules = NorthernThailandRules()
        self.hospitality_mapper = HospitalitySchemaMapper()
        self.cultural_context = LocalCulturalContext()
        
        # Use existing business logic if available
        if EXISTING_COMPONENTS_AVAILABLE:
            try:
                self.business_mapper = BusinessLogicMapper()
                self.tourism_business_rules = self.business_mapper.get_business_logic('company-b')
            except Exception as e:
                logger.warning(f"Failed to load existing business mapper: {e}")
                self.tourism_business_rules = self._get_fallback_tourism_rules()
        else:
            self.tourism_business_rules = self._get_fallback_tourism_rules()
        
        logger.info(f"üè® Tourism Prompt System initialized for {self.company_name}")
    
    def generate_sql_prompt(self, question: str, schema_info: Dict[str, Any]) -> str:
        """üéØ Generate Tourism-specific SQL prompt"""
        
        self.usage_stats['queries_processed'] += 1
        self.usage_stats['last_used'] = datetime.now().isoformat()
        
        # Analyze tourism context in question
        tourism_context = self._analyze_tourism_context(question)
        
        # Get regional insights
        regional_insights = self.regional_rules.get_contextual_insights(question)
        
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.company_name}

üè® ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏™‡∏≤‡∏Ç‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
üåø ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏≥‡∏õ‡∏≤‡∏á ‡∏•‡∏≥‡∏û‡∏π‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: 300,000 - 800,000 ‡∏ö‡∏≤‡∏ó (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ)
üéØ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: {', '.join(self.regional_rules.get_primary_tourism_clients())}

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:
{self._format_tourism_schema(schema_info)}

üîß ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:
{self._get_tourism_sql_rules()}

üåü ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:
{self._format_regional_tourism_logic(tourism_context)}

üé≠ ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô:
{self.cultural_context.get_cultural_considerations(question)}

üí° Tourism Business Intelligence:
{self._get_tourism_business_insights(regional_insights)}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:"""

        self.usage_stats['successful_generations'] += 1
        return prompt
    
    def format_response(self, question: str, results: List[Dict], metadata: Dict) -> str:
        """üé® Format Tourism response with cultural context"""
        
        if not results:
            return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö: {question}"
        
        response = f"üè® ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ - {self.company_name}\n\n"
        
        # Analyze if this is tourism-specific data
        is_tourism_data = self._is_tourism_related_data(results)
        
        if is_tourism_data:
            response += "üåø ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö:\n"
        else:
            response += "üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£:\n"
        
        # Display results with tourism context
        for i, row in enumerate(results[:12], 1):
            response += f"{i:2d}. "
            
            # Format each field appropriately
            for key, value in row.items():
                if 'budget' in key.lower() and isinstance(value, (int, float)):
                    response += f"{key}: {value:,.0f} ‡∏ö‡∏≤‡∏ó, "
                elif 'client' in key.lower() and value:
                    # Add tourism context to client names
                    tourism_context = self._get_client_tourism_context(value)
                    response += f"{key}: {value}{tourism_context}, "
                elif 'project_name' in key.lower() and value:
                    # Highlight tourism projects
                    tourism_indicator = self._get_project_tourism_indicator(value)
                    response += f"{key}: {value}{tourism_indicator}, "
                else:
                    response += f"{key}: {value}, "
            
            response = response.rstrip(', ') + "\n"
        
        # Add tourism insights
        response += f"\nüéØ Tourism Intelligence:\n"
        response += f"‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        response += f"‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠\n"
        response += f"‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•„Ç∏‡∏µ: Vue.js, Firebase, Mobile Apps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß\n"
        
        # Add regional insights
        regional_insights = self._analyze_regional_context(results)
        if regional_insights:
            response += f"‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: {regional_insights}\n"
        
        return response
    
    def _analyze_tourism_context(self, question: str) -> Dict[str, Any]:
        """üîç Analyze tourism context in question"""
        
        question_lower = question.lower()
        
        tourism_keywords = {
            'accommodation': ['‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', '‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó', 'hotel', 'resort', '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å'],
            'attractions': ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß'],
            'cultural': ['‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', 'culture', '‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', 'lanna', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ', 'tradition'],
            'regional': ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', 'chiang mai', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'northern', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô'],
            'food': ['‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'restaurant', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'food', '‡∏Ñ‡∏£‡∏±‡∏ß', 'kitchen'],
            'nature': ['‡∏™‡∏ß‡∏ô', 'garden', '‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', 'nature', '‡∏õ‡πà‡∏≤', 'forest', '‡∏î‡∏≠‡∏¢', 'mountain']
        }
        
        detected_categories = []
        for category, keywords in tourism_keywords.items():
            if any(keyword in question_lower for keyword in keywords):
                detected_categories.append(category)
        
        return {
            'categories': detected_categories,
            'is_tourism_focused': len(detected_categories) > 0,
            'primary_focus': detected_categories[0] if detected_categories else 'general',
            'complexity': len(detected_categories)
        }
    
    def _format_tourism_schema(self, schema_info: Dict[str, Any]) -> str:
        """üìä Format schema with tourism context"""
        
        base_schema = """‚Ä¢ employees: id, name, department, position, salary, hire_date, email
  - ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ, ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
‚Ä¢ projects: id, name, client, budget, status, start_date, end_date, tech_stack  
  - ‡πÄ‡∏ô‡πâ‡∏ô: ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡πÅ‡∏≠‡∏û‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 300k-800k
‚Ä¢ employee_projects: employee_id, project_id, role, allocation
  - ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏≤‡∏ô"""
        
        return base_schema
    
    def _get_tourism_sql_rules(self) -> str:
        """üîß Tourism-specific SQL generation rules"""
        
        return """1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: 
   - client ILIKE '%‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß%' OR client ILIKE '%‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°%' OR client ILIKE '%tourism%'
   - client ILIKE '%‡∏î‡∏∏‡∏™‡∏¥‡∏ï%' OR client ILIKE '%TAT%' OR client ILIKE '%‡∏™‡∏ß‡∏ô%'

2. ‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:
   - client ILIKE '%‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà%' OR client ILIKE '%‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠%'
   - client ILIKE '%‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤%' OR client ILIKE '%lanna%'

3. ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ:
   - budget BETWEEN 300000 AND 800000 (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á)
   - budget > 600000 (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏ç‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)

4. ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:
   - tech_stack ILIKE '%Vue.js%' OR tech_stack ILIKE '%Firebase%'
   - tech_stack ILIKE '%Mobile%' OR tech_stack ILIKE '%App%'

5. ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á:
   - position ILIKE '%tourism%' OR position ILIKE '%regional%'
   - department = 'IT' AND salary BETWEEN 32000 AND 70000"""
    
    def _format_regional_tourism_logic(self, tourism_context: Dict[str, Any]) -> str:
        """üåü Format regional tourism business logic"""
        
        logic_lines = []
        
        if tourism_context['is_tourism_focused']:
            focus = tourism_context['primary_focus']
            
            if focus == 'accommodation':
                logic_lines.append("‚Ä¢ ‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£, Mobile check-in")
                logic_lines.append("‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏∏‡∏™‡∏¥‡∏ï, ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏ö‡∏π‡∏ï‡∏¥‡∏Ñ, ‡πÇ‡∏Æ‡∏°‡∏™‡πÄ‡∏ï‡∏¢‡πå")
                
            elif focus == 'attractions':
                logic_lines.append("‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: ‡πÅ‡∏≠‡∏û‡∏ô‡∏≥‡∏ó‡∏≤‡∏á, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß")
                logic_lines.append("‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: TAT, ‡∏™‡∏ß‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå, ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå")
                
            elif focus == 'cultural':
                logic_lines.append("‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°, ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°")
                logic_lines.append("‚Ä¢ ‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: ‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô, ‡∏®‡∏¥‡∏•‡∏õ‡∏∞, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏†‡∏≤‡∏©‡∏≤‡∏ñ‡∏¥‡πà‡∏ô")
                
            elif focus == 'food':
                logic_lines.append("‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏£‡∏∞‡∏ö‡∏ö POS, ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡πÅ‡∏≠‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                logic_lines.append("‚Ä¢ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á: ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢, ‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•, ‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß, ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏õ‡∏π")
        else:
            # General tourism logic
            logic_lines.append("‚Ä¢ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡πÅ‡∏≠‡∏û‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")
            logic_lines.append("‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: Vue.js, Firebase, Mobile development")
        
        logic_lines.append("‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: SEO ‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô, Social Media, ‡∏†‡∏≤‡∏©‡∏≤‡∏ñ‡∏¥‡πà‡∏ô")
        logic_lines.append("‚Ä¢ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
        
        return '\n'.join(logic_lines)
    
    def _get_tourism_business_insights(self, regional_insights: Dict[str, Any]) -> str:
        """üí° Get tourism business intelligence insights"""
        
        insights = []
        
        insights.append("‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏•‡∏≤‡∏î: ‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢ vs ‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ï‡∏¥")
        insights.append("‚Ä¢ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: High season (Nov-Feb), Low season (Jun-Sep)")
        insights.append("‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°, ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢")
        insights.append("‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°: Mobile apps, QR codes, Contactless payment")
        insights.append("‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢: ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô, ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ, ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
        
        return '\n'.join(insights)
    
    def _is_tourism_related_data(self, results: List[Dict]) -> bool:
        """üîç Check if results contain tourism-related data"""
        
        if not results:
            return False
        
        tourism_indicators = [
            '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 'hotel', '‡∏î‡∏∏‡∏™‡∏¥‡∏ï', 'TAT',
            '‡∏™‡∏ß‡∏ô', 'garden', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'restaurant', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà'
        ]
        
        # Check in client names and project names
        for row in results:
            for key, value in row.items():
                if isinstance(value, str):
                    if any(indicator in value.lower() for indicator in tourism_indicators):
                        return True
        
        return False
    
    def _get_client_tourism_context(self, client_name: str) -> str:
        """üè® Add tourism context to client names"""
        
        context_map = {
            '‡∏î‡∏∏‡∏™‡∏¥‡∏ï': ' üè®',
            '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°': ' üè®',
            'hotel': ' üè®',
            '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß': ' ‚úàÔ∏è',
            'tourism': ' ‚úàÔ∏è',
            'TAT': ' üåü',
            '‡∏™‡∏ß‡∏ô': ' üåø',
            'garden': ' üåø',
            '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£': ' üçú',
            'restaurant': ' üçú',
            '‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤': ' üé≠',
            'lanna': ' üé≠'
        }
        
        client_lower = client_name.lower()
        for keyword, icon in context_map.items():
            if keyword in client_lower:
                return icon
        
        return ''
    
    def _get_project_tourism_indicator(self, project_name: str) -> str:
        """üéØ Add tourism indicator to project names"""
        
        project_lower = project_name.lower()
        
        if any(word in project_lower for word in ['‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 'hotel']):
            return ' [‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°]'
        elif any(word in project_lower for word in ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism']):
            return ' [‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß]'
        elif any(word in project_lower for word in ['mobile', 'app']):
            return ' [‡πÅ‡∏≠‡∏û‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠]'
        elif any(word in project_lower for word in ['pos', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£']):
            return ' [‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£]'
        
        return ''
    
    def _analyze_regional_context(self, results: List[Dict]) -> str:
        """üåø Analyze regional context from results"""
        
        insights = []
        
        # Count tourism vs non-tourism projects
        tourism_count = 0
        total_budget = 0
        
        for row in results:
            if 'budget' in row and isinstance(row['budget'], (int, float)):
                total_budget += row['budget']
            
            # Check if this is tourism-related
            is_tourism = False
            for key, value in row.items():
                if isinstance(value, str) and any(word in value.lower() for word in ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 'tourism']):
                    is_tourism = True
                    break
            
            if is_tourism:
                tourism_count += 1
        
        if tourism_count > 0:
            tourism_percentage = (tourism_count / len(results)) * 100
            insights.append(f"‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {tourism_percentage:.0f}% ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        if total_budget > 0:
            avg_budget = total_budget / len(results)
            insights.append(f"‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_budget:,.0f} ‡∏ö‡∏≤‡∏ó")
        
        return ', '.join(insights) if insights else "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ"
    
    def _load_business_rules(self) -> Dict[str, Any]:
        """üìã Tourism business rules"""
        return {
            'tourism_seasons': {
                'high_season': 'EXTRACT(MONTH FROM start_date) IN (11, 12, 1, 2)',
                'cool_season': 'EXTRACT(MONTH FROM start_date) IN (11, 12, 1, 2)',
                'hot_season': 'EXTRACT(MONTH FROM start_date) IN (3, 4, 5)',
                'rainy_season': 'EXTRACT(MONTH FROM start_date) IN (6, 7, 8, 9, 10)',
                'festival_season': 'EXTRACT(MONTH FROM start_date) IN (4, 11)'  # Songkran, Loy Krathong
            },
            'project_scales': {
                'local': 'budget < 400000',
                'regional': 'budget BETWEEN 400000 AND 600000',
                'provincial': 'budget > 600000'
            },
            'tourism_types': {
                'accommodation': "client ILIKE '%‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°%' OR client ILIKE '%‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó%'",
                'attractions': "client ILIKE '%‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß%' OR client ILIKE '%‡∏™‡∏ß‡∏ô%'",
                'food_beverage': "client ILIKE '%‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£%' OR client ILIKE '%‡∏Ñ‡∏£‡∏±‡∏ß%'",
                'cultural': "client ILIKE '%‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°%' OR client ILIKE '%‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤%'"
            }
        }
    
    def _load_schema_mappings(self) -> Dict[str, Any]:
        """üóÑÔ∏è Tourism schema mappings"""
        return {
            'core_tables': ['employees', 'projects', 'employee_projects'],
            'tourism_focus_fields': {
                'projects': ['client', 'budget', 'tech_stack'],
                'employees': ['position', 'department', 'salary']
            },
            'regional_keywords': ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°']
        }
    
    def _get_fallback_tourism_rules(self) -> Dict[str, Any]:
        """Fallback tourism rules if existing mapper not available"""
        return {
            'tourism_projects': {
                'hotel_systems': "client ILIKE '%‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°%' OR client ILIKE '%‡∏î‡∏∏‡∏™‡∏¥‡∏ï%'",
                'tourism_apps': "client ILIKE '%‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß%' OR client ILIKE '%TAT%'",
                'restaurant_pos': "client ILIKE '%‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£%' OR client ILIKE '%‡∏≠‡∏≤‡∏´‡∏≤‡∏£%'",
                'regional_projects': "client ILIKE '%‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà%' OR client ILIKE '%‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠%'"
            },
            'budget_ranges': {
                'small_regional': 'budget < 400000',
                'medium_regional': 'budget BETWEEN 400000 AND 600000',
                'large_regional': 'budget > 600000'
            }
        }


# Supporting Classes for Tourism System

class NorthernThailandRules:
    """üåø Northern Thailand regional business rules"""
    
    def __init__(self):
        self.primary_clients = [
            '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏∏‡∏™‡∏¥‡∏ï ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
            '‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢',
            '‡∏™‡∏ß‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
            '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤',
            '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà'
        ]
        
        self.regional_keywords = {
            'locations': ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'],
            'culture': ['‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', 'lanna', '‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ', '‡∏ú‡πâ‡∏≤‡πÑ‡∏ó‡∏¢'],
            'food': ['‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢', '‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•', '‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß', '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏õ‡∏π', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'],
            'attractions': ['‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡πÇ‡∏£‡∏£‡∏™', '‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô']
        }
    
    def get_primary_tourism_clients(self) -> List[str]:
        """Get primary tourism clients"""
        return self.primary_clients
    
    def get_contextual_insights(self, question: str) -> Dict[str, Any]:
        """Get contextual insights based on question"""
        
        question_lower = question.lower()
        
        relevant_keywords = []
        for category, keywords in self.regional_keywords.items():
            matches = [kw for kw in keywords if kw in question_lower]
            if matches:
                relevant_keywords.extend([(category, kw) for kw in matches])
        
        return {
            'relevant_keywords': relevant_keywords,
            'regional_focus': len(relevant_keywords) > 0,
            'cultural_context': any(cat == 'culture' for cat, _ in relevant_keywords),
            'food_context': any(cat == 'food' for cat, _ in relevant_keywords)
        }


class HospitalitySchemaMapper:
    """üè® Maps hospitality concepts to database schema"""
    
    def __init__(self):
        self.hospitality_mappings = {
            'accommodation': {
                'keywords': ['‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', '‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó', 'hotel', 'resort', '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å'],
                'sql_conditions': "client ILIKE '%‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°%' OR client ILIKE '%‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó%'"
            },
            'restaurant': {
                'keywords': ['‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'restaurant', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Ñ‡∏£‡∏±‡∏ß'],
                'sql_conditions': "client ILIKE '%‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£%' OR client ILIKE '%‡∏≠‡∏≤‡∏´‡∏≤‡∏£%'"
            },
            'tourism_service': {
                'keywords': ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism', '‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'guide'],
                'sql_conditions': "client ILIKE '%‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß%' OR client ILIKE '%tourism%'"
            }
        }
    
    def map_tourism_concepts(self, question: str) -> Dict[str, str]:
        """Map tourism concepts to SQL conditions"""
        
        question_lower = question.lower()
        mapped_conditions = {}
        
        for concept, mapping in self.hospitality_mappings.items():
            if any(keyword in question_lower for keyword in mapping['keywords']):
                mapped_conditions[concept] = mapping['sql_conditions']
        
        return mapped_conditions


class LocalCulturalContext:
    """üé≠ Provides local cultural context for better responses"""
    
    def __init__(self):
        self.cultural_elements = {
            'language': {
                'lanna_terms': ['‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏Ñ‡∏≥‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏†‡∏≤‡∏©‡∏≤‡∏ñ‡∏¥‡πà‡∏ô'],
                'respect_terms': ['‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞', '‡∏ô‡πâ‡∏≠‡∏á', '‡∏û‡∏µ‡πà', '‡∏•‡∏∏‡∏á', '‡∏õ‡πâ‡∏≤']
            },
            'traditions': {
                'festivals': ['‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå', '‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á', '‡∏¢‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏á', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡∏ç‡πà'],
                'crafts': ['‡∏ú‡πâ‡∏≤‡πÑ‡∏ó‡∏¢', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô', '‡∏£‡πà‡∏°‡∏ö‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏±‡πâ‡∏ô‡∏î‡∏¥‡∏ô‡πÄ‡∏ú‡∏≤']
            },
            'hospitality': {
                'service_style': ['‡∏ô‡πâ‡∏≥‡πÉ‡∏à‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£'],
                'local_wisdom': ['‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á', '‡∏ß‡∏¥‡∏ñ‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤']
            }
        }
    
    def get_cultural_considerations(self, question: str) -> str:
        """Get cultural considerations for the question"""
        
        considerations = []
        question_lower = question.lower()
        
        # Check for cultural keywords in question
        if any(term in question_lower for term in ['‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ', '‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤']):
            considerations.extend([
                "‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: ‡∏†‡∏≤‡∏©‡∏≤‡∏ñ‡∏¥‡πà‡∏ô, ‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ, ‡∏ß‡∏¥‡∏ñ‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
                "‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
                "‚Ä¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏±‡∏ï‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
            ])
        
        if any(term in question_lower for term in ['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤']):
            considerations.extend([
                "‚Ä¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô, ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£, ‡πÉ‡∏™‡πà‡πÉ‡∏à",
                "‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢",
                "‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô"
            ])
        
        # Default considerations
        if not considerations:
            considerations = [
                "‚Ä¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö",
                "‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢", 
                "‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°"
            ]
        
        return '\n'.join(considerations[:3])  # Return max 3 considerations