import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from company_prompts.base_prompt import BaseCompanyPrompt
from typing import Dict, Any, List
from datetime import datetime
from shared_components.logging_config import logger

class SimpleTourismPrompt(BaseCompanyPrompt):
    """üè® CLEAN Tourism Prompt - All-in-one, minimal methods"""
    
    def __init__(self, company_config: Dict[str, Any]):
        super().__init__(company_config)
        
        # üéØ Core Tourism Data (consolidated from 4 files ‚Üí 1 dict)
        self.tourism_data = {
            # Tourism Keywords
            'keywords': {
                'accommodation': ['‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', '‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó', 'hotel', 'resort', '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å'],
                'tourism': ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism', 'TAT', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß'],
                'food': ['‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'restaurant', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Ñ‡∏£‡∏±‡∏ß'],
                'culture': ['‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', 'lanna', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ'],
                'regional': ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'northern']
            },
            
            # Primary Clients
            'clients': [
                '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏∏‡∏™‡∏¥‡∏ï ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
                '‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', 
                '‡∏™‡∏ß‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
                '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤',
                '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà'
            ],
            
            # Lanna Culture (simplified)
            'culture': {
                'greeting': '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÄ‡∏à‡πâ‡∏≤',
                'foods': ['‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢', '‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•', '‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß', '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏õ‡∏π'],
                'values': ['‡∏ô‡πâ‡∏≥‡πÉ‡∏à‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£', '‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤'],
                'festivals': ['‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå', '‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á', '‡∏¢‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏á', '‡∏ö‡∏∏‡∏ç‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü']
            },
            
            # Business Rules (simplified)
            'budget_ranges': {
                'small': 'budget < 400000',
                'medium': 'budget BETWEEN 400000 AND 600000', 
                'large': 'budget > 600000'
            }
        }
        
        logger.info(f"üè® SimpleTourismPrompt initialized for {self.company_name}")
    
    # ========================================================================
    # üéØ CORE METHODS - Only 4 essential methods!
    # ========================================================================
    
    async def process_question(self, question: str) -> Dict[str, Any]:
        """üéØ Main processing method - SIMPLIFIED"""
        
        try:
            self.usage_stats['queries_processed'] += 1
            self.usage_stats['last_used'] = datetime.now().isoformat()
            
            # Simple detection
            if self._is_greeting(question):
                return self._create_tourism_greeting()
            elif self._is_tourism_query(question):
                return self._create_tourism_response(question)
            else:
                return self._create_general_response(question)
                
        except Exception as e:
            logger.error(f"‚ùå Tourism processing failed: {e}")
            return {
                'success': False,
                'answer': f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}",
                'error': str(e),
                'tenant_id': self.company_id
            }
    
    def generate_sql_prompt(self, question: str, schema_info: Dict[str, Any]) -> str:
        """üéØ Simple SQL prompt generation"""
        
        # Detect tourism type
        tourism_type = self._detect_tourism_type(question)
        cultural_hint = self._get_cultural_hint(tourism_type)
        
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.company_name}

üè® ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
üåø ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: {', '.join(self.tourism_data['clients'][:3])}
üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 300,000 - 800,000 ‡∏ö‡∏≤‡∏ó

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ employees: id, name, department, position, salary, hire_date, email
‚Ä¢ projects: id, name, client, budget, status, start_date, end_date, tech_stack
‚Ä¢ employee_projects: employee_id, project_id, role, allocation

üîß ‡∏Å‡∏é SQL ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:
1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß: client ILIKE '%‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß%' OR client ILIKE '%‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°%'
2. ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: budget BETWEEN 300000 AND 800000
3. ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÅ‡∏•‡∏∞ COALESCE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NULL
4. LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠

üé≠ ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°: {cultural_hint}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:"""

        return prompt
    
    def format_response(self, question: str, results: List[Dict], metadata: Dict) -> str:
        """üé® Simple response formatting"""
        
        if not results:
            return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö: {question}"
        
        response = f"üè® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ - {self.company_name}\n\n"
        
        # Simple display
        for i, row in enumerate(results[:10], 1):
            response += f"{i:2d}. "
            for key, value in row.items():
                if 'budget' in key.lower() and isinstance(value, (int, float)):
                    response += f"{key}: {value:,.0f} ‡∏ö‡∏≤‡∏ó, "
                elif 'client' in key.lower() and value:
                    # Add tourism emoji
                    icon = self._get_tourism_icon(value)
                    response += f"{key}: {value}{icon}, "
                else:
                    response += f"{key}: {value}, "
            response = response.rstrip(', ') + "\n"
        
        # Add tourism insight
        response += f"\nüåø ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: ‡∏û‡∏ö {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠"
        response += f"\nüé≠ ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {', '.join(self.tourism_data['culture']['values'][:2])}"
        
        return response
    
    def _load_business_rules(self) -> Dict[str, Any]:
        """üìã Simple business rules"""
        return {
            'focus': 'tourism_hospitality_northern_thailand',
            'budget_ranges': self.tourism_data['budget_ranges'],
            'primary_clients': self.tourism_data['clients'][:3]
        }
    
    def _load_schema_mappings(self) -> Dict[str, Any]:
        """üóÑÔ∏è Simple schema mappings"""
        return {
            'main_tables': ['employees', 'projects', 'employee_projects'],
            'tourism_keywords': self.tourism_data['keywords']
        }
    
    # ========================================================================
    # üîß SIMPLE HELPER METHODS - Only essential ones!
    # ========================================================================
    
    def _is_greeting(self, question: str) -> bool:
        """Check if greeting"""
        greetings = ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', '‡πÄ‡∏à‡πâ‡∏≤', '‡∏ä‡πà‡∏ß‡∏¢']
        return any(word in question.lower() for word in greetings)
    
    def _is_tourism_query(self, question: str) -> bool:
        """Check if tourism-related query"""
        question_lower = question.lower()
        all_keywords = []
        for category in self.tourism_data['keywords'].values():
            all_keywords.extend(category)
        return any(keyword in question_lower for keyword in all_keywords)
    
    def _detect_tourism_type(self, question: str) -> str:
        """Simple tourism type detection"""
        question_lower = question.lower()
        
        for tourism_type, keywords in self.tourism_data['keywords'].items():
            if any(keyword in question_lower for keyword in keywords):
                return tourism_type
        return 'general'
    
    def _get_cultural_hint(self, tourism_type: str) -> str:
        """Get cultural context hint"""
        culture_hints = {
            'accommodation': f"‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤, {self.tourism_data['culture']['values'][0]}",
            'food': f"‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: {', '.join(self.tourism_data['culture']['foods'][:2])}",
            'culture': f"‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {', '.join(self.tourism_data['culture']['festivals'][:2])}",
            'general': f"‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, {self.tourism_data['culture']['values'][0]}"
        }
        return culture_hints.get(tourism_type, culture_hints['general'])
    
    def _get_tourism_icon(self, client_name: str) -> str:
        """Simple icon mapping"""
        client_lower = client_name.lower()
        if any(word in client_lower for word in ['‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 'hotel']):
            return ' üè®'
        elif any(word in client_lower for word in ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 'tourism']):
            return ' ‚úàÔ∏è'
        elif any(word in client_lower for word in ['‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'restaurant']):
            return ' üçú'
        elif any(word in client_lower for word in ['‡∏™‡∏ß‡∏ô', 'garden']):
            return ' üåø'
        return ''
    
    def _create_tourism_greeting(self) -> Dict[str, Any]:
        """Simple tourism greeting"""
        
        answer = f"""{self.tourism_data['culture']['greeting']}! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.company_name}

üè® ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó
‚Ä¢ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞ POS
‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤

üåø ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: {', '.join(self.tourism_data['clients'][:3])}

üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
‚Ä¢ "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
‚Ä¢ "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤"

{self.tourism_data['culture']['values'][0]} - ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"""
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'tourism_greeting_{self.model}',
            'tenant_id': self.company_id
        }
    
    def _create_tourism_response(self, question: str) -> Dict[str, Any]:
        """Simple tourism response with mock data"""
        
        tourism_type = self._detect_tourism_type(question)
        
        responses = {
            'accommodation': f"""üè® ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å:

1. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° - ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏∏‡∏™‡∏¥‡∏ï ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 800,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Vue.js, Firebase
   ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

2. ‡πÅ‡∏≠‡∏õ‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å - ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠  
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 450,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Flutter, Node.js

üåø ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {self.tourism_data['culture']['values'][0]}""",

            'tourism': f"""‚úàÔ∏è ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:

1. ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß - ‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 600,000 ‡∏ö‡∏≤‡∏ó  
   ‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: React, Firebase, Maps API
   ‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠

2. Mobile App ‡∏™‡∏ß‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° - ‡∏™‡∏ß‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 450,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Flutter, Firebase

üé≠ ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {', '.join(self.tourism_data['culture']['festivals'][:2])}""",

            'food': f"""üçú ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£:

1. ‡∏£‡∏∞‡∏ö‡∏ö POS ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ - ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 350,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: React Native, Node.js
   ‚Ä¢ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©: {', '.join(self.tourism_data['culture']['foods'][:2])}

2. ‡πÅ‡∏≠‡∏õ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
   ‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 280,000 ‡∏ö‡∏≤‡∏ó
   ‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô: ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô

ü•¢ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {', '.join(self.tourism_data['culture']['foods'])}"""
        }
        
        answer = responses.get(tourism_type, f"""üåø ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {question}

‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {self.company_name}:
‚Ä¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {', '.join(self.tourism_data['clients'][:2])}
‚Ä¢ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 300k-800k ‡∏ö‡∏≤‡∏ó

{self.tourism_data['culture']['greeting']} - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô""")
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'tourism_{tourism_type}_{self.model}',
            'tenant_id': self.company_id
        }
    
    def _create_general_response(self, question: str) -> Dict[str, Any]:
        """Simple general response"""
        
        answer = f"""üè® ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {self.company_name}:
‚Ä¢ ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
‚Ä¢ ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà  
‚Ä¢ ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤: {self.tourism_data['culture']['values'][0]}

üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö: ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß, ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤"""
        
        return {
            'success': True,
            'answer': answer,
            'sql_query': None,
            'data_source_used': f'tourism_general_{self.model}',
            'tenant_id': self.company_id
        }