FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first (for better Docker layer caching)
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy configuration files
COPY tenant_config.yaml .

# Copy ALL application files and verify
COPY smart_prompt_system.py .
COPY enterprise_schema_validator.py .
COPY enhanced_postgres_agent.py .
COPY enhanced_multi_agent_service.py .
COPY intent_classifier.py .
COPY enterprise_intent_classifier.py .
# Verify files are copied correctly
RUN echo "üìÅ Verifying copied files:" && \
    ls -la *.py && \
    echo "üîç Checking enhanced_postgres_agent.py:" && \
    head -5 enhanced_postgres_agent.py && \
    echo "‚úÖ File verification complete"

# Legacy compatibility (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ service ‡πÄ‡∏î‡∏¥‡∏°)
COPY enhanced_multi_agent_service.py multi_agent_service.py

# Create logs directory
RUN mkdir -p /app/logs

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Enhanced health check script
COPY <<'HEALTH_EOF' /app/healthcheck.py
#!/usr/bin/env python3
import requests
import sys
import os

def test_health():
    try:
        port = os.getenv('PORT', '5000')
        response = requests.get(f"http://localhost:{port}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            # Check for enhanced features
            if 'enhancement_features' in data:
                print("‚úÖ Enhanced RAG Service is healthy")
                print(f"Version: {data.get('version', 'unknown')}")
                print(f"Features: {len(data.get('enhancement_features', []))}")
                return True
            else:
                print("‚ö†Ô∏è  Basic RAG Service is healthy (not enhanced)")
                return True
        else:
            print(f"‚ùå Health check failed: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Connection failed - service not responding")
        return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

if __name__ == "__main__":
    success = test_health()
    sys.exit(0 if success else 1)
HEALTH_EOF

RUN chmod +x /app/healthcheck.py

# Expose port
EXPOSE 5000

# Enhanced health check with longer intervals for startup
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD python /app/healthcheck.py

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash siamtech && \
    chown -R siamtech:siamtech /app

USER siamtech

# Run the enhanced multi-agent service
CMD ["python", "enhanced_multi_agent_service.py"]