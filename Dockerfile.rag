FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first (for better Docker layer caching)
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy configuration files
COPY tenant_config.yaml .

# Copy refactored modules FIRST
COPY refactored_modules/ ./refactored_modules/

# Copy main application files
COPY enhanced_multi_agent_service.py .
COPY integration_bridge.py .

# Copy company prompts (if they exist)
COPY company_prompts/ ./company_prompts/
COPY core_system/ ./core_system/
COPY shared_components/ ./shared_components/

# Create necessary directories and files
RUN mkdir -p /app/logs /app/shared_components && \
    touch /app/shared_components/__init__.py

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Create a simple health check script
COPY <<'HEALTH_EOF' /app/healthcheck.py
#!/usr/bin/env python3
import requests
import sys
import os

def test_health():
    try:
        port = os.getenv('PORT', '5000')
        response = requests.get(f"http://localhost:{port}/health", timeout=10)
        
        if response.status_code == 200:
            print("✅ RAG Service is healthy")
            return True
        else:
            print(f"❌ Health check failed: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("❌ Connection failed - service not responding")
        return False
    except Exception as e:
        print(f"❌ Health check error: {e}")
        return False

if __name__ == "__main__":
    success = test_health()
    sys.exit(0 if success else 1)
HEALTH_EOF

RUN chmod +x /app/healthcheck.py

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD python /app/healthcheck.py

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash siamtech && \
    chown -R siamtech:siamtech /app

USER siamtech

# 🔥 FIXED: Run the enhanced multi-agent service properly
CMD ["python", "enhanced_multi_agent_service.py"]